/***
Copyright 2019 Cisco Systems Inc. All rights reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/noironetworks/aci-containers/pkg/acicontainersoperator/apis/aci.ctrl/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AciContainersOperatorLister helps list AciContainersOperators.
type AciContainersOperatorLister interface {
	// List lists all AciContainersOperators in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.AciContainersOperator, err error)
	// AciContainersOperators returns an object that can list and get AciContainersOperators.
	AciContainersOperators(namespace string) AciContainersOperatorNamespaceLister
	AciContainersOperatorListerExpansion
}

// aciContainersOperatorLister implements the AciContainersOperatorLister interface.
type aciContainersOperatorLister struct {
	indexer cache.Indexer
}

// NewAciContainersOperatorLister returns a new AciContainersOperatorLister.
func NewAciContainersOperatorLister(indexer cache.Indexer) AciContainersOperatorLister {
	return &aciContainersOperatorLister{indexer: indexer}
}

// List lists all AciContainersOperators in the indexer.
func (s *aciContainersOperatorLister) List(selector labels.Selector) (ret []*v1alpha1.AciContainersOperator, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AciContainersOperator))
	})
	return ret, err
}

// AciContainersOperators returns an object that can list and get AciContainersOperators.
func (s *aciContainersOperatorLister) AciContainersOperators(namespace string) AciContainersOperatorNamespaceLister {
	return aciContainersOperatorNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AciContainersOperatorNamespaceLister helps list and get AciContainersOperators.
type AciContainersOperatorNamespaceLister interface {
	// List lists all AciContainersOperators in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.AciContainersOperator, err error)
	// Get retrieves the AciContainersOperator from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.AciContainersOperator, error)
	AciContainersOperatorNamespaceListerExpansion
}

// aciContainersOperatorNamespaceLister implements the AciContainersOperatorNamespaceLister
// interface.
type aciContainersOperatorNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AciContainersOperators in the indexer for a given namespace.
func (s aciContainersOperatorNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.AciContainersOperator, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AciContainersOperator))
	})
	return ret, err
}

// Get retrieves the AciContainersOperator from the indexer for a given namespace and name.
func (s aciContainersOperatorNamespaceLister) Get(name string) (*v1alpha1.AciContainersOperator, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("acicontainersoperator"), name)
	}
	return obj.(*v1alpha1.AciContainersOperator), nil
}
