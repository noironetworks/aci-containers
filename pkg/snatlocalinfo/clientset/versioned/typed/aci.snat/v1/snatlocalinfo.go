/***
Copyright 2019 Cisco Systems Inc. All rights reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by client-gen. DO NOT EDIT.

package v1

import (
	"time"

	v1 "github.com/noironetworks/aci-containers/pkg/snatlocalinfo/apis/aci.snat/v1"
	scheme "github.com/noironetworks/aci-containers/pkg/snatlocalinfo/clientset/versioned/scheme"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	rest "k8s.io/client-go/rest"
)

// SnatLocalInfosGetter has a method to return a SnatLocalInfoInterface.
// A group's client should implement this interface.
type SnatLocalInfosGetter interface {
	SnatLocalInfos(namespace string) SnatLocalInfoInterface
}

// SnatLocalInfoInterface has methods to work with SnatLocalInfo resources.
type SnatLocalInfoInterface interface {
	Create(*v1.SnatLocalInfo) (*v1.SnatLocalInfo, error)
	Update(*v1.SnatLocalInfo) (*v1.SnatLocalInfo, error)
	Delete(name string, options *metav1.DeleteOptions) error
	DeleteCollection(options *metav1.DeleteOptions, listOptions metav1.ListOptions) error
	Get(name string, options metav1.GetOptions) (*v1.SnatLocalInfo, error)
	List(opts metav1.ListOptions) (*v1.SnatLocalInfoList, error)
	Watch(opts metav1.ListOptions) (watch.Interface, error)
	Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1.SnatLocalInfo, err error)
	SnatLocalInfoExpansion
}

// snatLocalInfos implements SnatLocalInfoInterface
type snatLocalInfos struct {
	client rest.Interface
	ns     string
}

// newSnatLocalInfos returns a SnatLocalInfos
func newSnatLocalInfos(c *AciV1Client, namespace string) *snatLocalInfos {
	return &snatLocalInfos{
		client: c.RESTClient(),
		ns:     namespace,
	}
}

// Get takes name of the snatLocalInfo, and returns the corresponding snatLocalInfo object, and an error if there is any.
func (c *snatLocalInfos) Get(name string, options metav1.GetOptions) (result *v1.SnatLocalInfo, err error) {
	result = &v1.SnatLocalInfo{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("snatlocalinfos").
		Name(name).
		VersionedParams(&options, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// List takes label and field selectors, and returns the list of SnatLocalInfos that match those selectors.
func (c *snatLocalInfos) List(opts metav1.ListOptions) (result *v1.SnatLocalInfoList, err error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	result = &v1.SnatLocalInfoList{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("snatlocalinfos").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Do().
		Into(result)
	return
}

// Watch returns a watch.Interface that watches the requested snatLocalInfos.
func (c *snatLocalInfos) Watch(opts metav1.ListOptions) (watch.Interface, error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	opts.Watch = true
	return c.client.Get().
		Namespace(c.ns).
		Resource("snatlocalinfos").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Watch()
}

// Create takes the representation of a snatLocalInfo and creates it.  Returns the server's representation of the snatLocalInfo, and an error, if there is any.
func (c *snatLocalInfos) Create(snatLocalInfo *v1.SnatLocalInfo) (result *v1.SnatLocalInfo, err error) {
	result = &v1.SnatLocalInfo{}
	err = c.client.Post().
		Namespace(c.ns).
		Resource("snatlocalinfos").
		Body(snatLocalInfo).
		Do().
		Into(result)
	return
}

// Update takes the representation of a snatLocalInfo and updates it. Returns the server's representation of the snatLocalInfo, and an error, if there is any.
func (c *snatLocalInfos) Update(snatLocalInfo *v1.SnatLocalInfo) (result *v1.SnatLocalInfo, err error) {
	result = &v1.SnatLocalInfo{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("snatlocalinfos").
		Name(snatLocalInfo.Name).
		Body(snatLocalInfo).
		Do().
		Into(result)
	return
}

// Delete takes name of the snatLocalInfo and deletes it. Returns an error if one occurs.
func (c *snatLocalInfos) Delete(name string, options *metav1.DeleteOptions) error {
	return c.client.Delete().
		Namespace(c.ns).
		Resource("snatlocalinfos").
		Name(name).
		Body(options).
		Do().
		Error()
}

// DeleteCollection deletes a collection of objects.
func (c *snatLocalInfos) DeleteCollection(options *metav1.DeleteOptions, listOptions metav1.ListOptions) error {
	var timeout time.Duration
	if listOptions.TimeoutSeconds != nil {
		timeout = time.Duration(*listOptions.TimeoutSeconds) * time.Second
	}
	return c.client.Delete().
		Namespace(c.ns).
		Resource("snatlocalinfos").
		VersionedParams(&listOptions, scheme.ParameterCodec).
		Timeout(timeout).
		Body(options).
		Do().
		Error()
}

// Patch applies the patch and returns the patched snatLocalInfo.
func (c *snatLocalInfos) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1.SnatLocalInfo, err error) {
	result = &v1.SnatLocalInfo{}
	err = c.client.Patch(pt).
		Namespace(c.ns).
		Resource("snatlocalinfos").
		SubResource(subresources...).
		Name(name).
		Body(data).
		Do().
		Into(result)
	return
}
