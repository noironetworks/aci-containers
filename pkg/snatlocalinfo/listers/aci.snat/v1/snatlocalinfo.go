/***
Copyright 2019 Cisco Systems Inc. All rights reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/noironetworks/aci-containers/pkg/snatlocalinfo/apis/aci.snat/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// SnatLocalInfoLister helps list SnatLocalInfos.
type SnatLocalInfoLister interface {
	// List lists all SnatLocalInfos in the indexer.
	List(selector labels.Selector) (ret []*v1.SnatLocalInfo, err error)
	// SnatLocalInfos returns an object that can list and get SnatLocalInfos.
	SnatLocalInfos(namespace string) SnatLocalInfoNamespaceLister
	SnatLocalInfoListerExpansion
}

// snatLocalInfoLister implements the SnatLocalInfoLister interface.
type snatLocalInfoLister struct {
	indexer cache.Indexer
}

// NewSnatLocalInfoLister returns a new SnatLocalInfoLister.
func NewSnatLocalInfoLister(indexer cache.Indexer) SnatLocalInfoLister {
	return &snatLocalInfoLister{indexer: indexer}
}

// List lists all SnatLocalInfos in the indexer.
func (s *snatLocalInfoLister) List(selector labels.Selector) (ret []*v1.SnatLocalInfo, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.SnatLocalInfo))
	})
	return ret, err
}

// SnatLocalInfos returns an object that can list and get SnatLocalInfos.
func (s *snatLocalInfoLister) SnatLocalInfos(namespace string) SnatLocalInfoNamespaceLister {
	return snatLocalInfoNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SnatLocalInfoNamespaceLister helps list and get SnatLocalInfos.
type SnatLocalInfoNamespaceLister interface {
	// List lists all SnatLocalInfos in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.SnatLocalInfo, err error)
	// Get retrieves the SnatLocalInfo from the indexer for a given namespace and name.
	Get(name string) (*v1.SnatLocalInfo, error)
	SnatLocalInfoNamespaceListerExpansion
}

// snatLocalInfoNamespaceLister implements the SnatLocalInfoNamespaceLister
// interface.
type snatLocalInfoNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all SnatLocalInfos in the indexer for a given namespace.
func (s snatLocalInfoNamespaceLister) List(selector labels.Selector) (ret []*v1.SnatLocalInfo, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.SnatLocalInfo))
	})
	return ret, err
}

// Get retrieves the SnatLocalInfo from the indexer for a given namespace and name.
func (s snatLocalInfoNamespaceLister) Get(name string) (*v1.SnatLocalInfo, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("snatlocalinfo"), name)
	}
	return obj.(*v1.SnatLocalInfo), nil
}
