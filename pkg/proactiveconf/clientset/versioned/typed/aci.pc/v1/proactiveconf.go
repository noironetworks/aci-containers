/***
Copyright 2021 Cisco Systems Inc. All rights reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by client-gen. DO NOT EDIT.

package v1

import (
	"context"
	json "encoding/json"
	"fmt"
	"time"

	v1 "github.com/noironetworks/aci-containers/pkg/proactiveconf/apis/aci.pc/v1"
	acipcv1 "github.com/noironetworks/aci-containers/pkg/proactiveconf/applyconfiguration/aci.pc/v1"
	scheme "github.com/noironetworks/aci-containers/pkg/proactiveconf/clientset/versioned/scheme"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	rest "k8s.io/client-go/rest"
)

// ProactiveConfsGetter has a method to return a ProactiveConfInterface.
// A group's client should implement this interface.
type ProactiveConfsGetter interface {
	ProactiveConfs(namespace string) ProactiveConfInterface
}

// ProactiveConfInterface has methods to work with ProactiveConf resources.
type ProactiveConfInterface interface {
	Create(ctx context.Context, proactiveConf *v1.ProactiveConf, opts metav1.CreateOptions) (*v1.ProactiveConf, error)
	Update(ctx context.Context, proactiveConf *v1.ProactiveConf, opts metav1.UpdateOptions) (*v1.ProactiveConf, error)
	Delete(ctx context.Context, name string, opts metav1.DeleteOptions) error
	DeleteCollection(ctx context.Context, opts metav1.DeleteOptions, listOpts metav1.ListOptions) error
	Get(ctx context.Context, name string, opts metav1.GetOptions) (*v1.ProactiveConf, error)
	List(ctx context.Context, opts metav1.ListOptions) (*v1.ProactiveConfList, error)
	Watch(ctx context.Context, opts metav1.ListOptions) (watch.Interface, error)
	Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts metav1.PatchOptions, subresources ...string) (result *v1.ProactiveConf, err error)
	Apply(ctx context.Context, proactiveConf *acipcv1.ProactiveConfApplyConfiguration, opts metav1.ApplyOptions) (result *v1.ProactiveConf, err error)
	ProactiveConfExpansion
}

// proactiveConfs implements ProactiveConfInterface
type proactiveConfs struct {
	client rest.Interface
	ns     string
}

// newProactiveConfs returns a ProactiveConfs
func newProactiveConfs(c *AciV1Client, namespace string) *proactiveConfs {
	return &proactiveConfs{
		client: c.RESTClient(),
		ns:     namespace,
	}
}

// Get takes name of the proactiveConf, and returns the corresponding proactiveConf object, and an error if there is any.
func (c *proactiveConfs) Get(ctx context.Context, name string, options metav1.GetOptions) (result *v1.ProactiveConf, err error) {
	result = &v1.ProactiveConf{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("proactiveconfs").
		Name(name).
		VersionedParams(&options, scheme.ParameterCodec).
		Do(ctx).
		Into(result)
	return
}

// List takes label and field selectors, and returns the list of ProactiveConfs that match those selectors.
func (c *proactiveConfs) List(ctx context.Context, opts metav1.ListOptions) (result *v1.ProactiveConfList, err error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	result = &v1.ProactiveConfList{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("proactiveconfs").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Do(ctx).
		Into(result)
	return
}

// Watch returns a watch.Interface that watches the requested proactiveConfs.
func (c *proactiveConfs) Watch(ctx context.Context, opts metav1.ListOptions) (watch.Interface, error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	opts.Watch = true
	return c.client.Get().
		Namespace(c.ns).
		Resource("proactiveconfs").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Watch(ctx)
}

// Create takes the representation of a proactiveConf and creates it.  Returns the server's representation of the proactiveConf, and an error, if there is any.
func (c *proactiveConfs) Create(ctx context.Context, proactiveConf *v1.ProactiveConf, opts metav1.CreateOptions) (result *v1.ProactiveConf, err error) {
	result = &v1.ProactiveConf{}
	err = c.client.Post().
		Namespace(c.ns).
		Resource("proactiveconfs").
		VersionedParams(&opts, scheme.ParameterCodec).
		Body(proactiveConf).
		Do(ctx).
		Into(result)
	return
}

// Update takes the representation of a proactiveConf and updates it. Returns the server's representation of the proactiveConf, and an error, if there is any.
func (c *proactiveConfs) Update(ctx context.Context, proactiveConf *v1.ProactiveConf, opts metav1.UpdateOptions) (result *v1.ProactiveConf, err error) {
	result = &v1.ProactiveConf{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("proactiveconfs").
		Name(proactiveConf.Name).
		VersionedParams(&opts, scheme.ParameterCodec).
		Body(proactiveConf).
		Do(ctx).
		Into(result)
	return
}

// Delete takes name of the proactiveConf and deletes it. Returns an error if one occurs.
func (c *proactiveConfs) Delete(ctx context.Context, name string, opts metav1.DeleteOptions) error {
	return c.client.Delete().
		Namespace(c.ns).
		Resource("proactiveconfs").
		Name(name).
		Body(&opts).
		Do(ctx).
		Error()
}

// DeleteCollection deletes a collection of objects.
func (c *proactiveConfs) DeleteCollection(ctx context.Context, opts metav1.DeleteOptions, listOpts metav1.ListOptions) error {
	var timeout time.Duration
	if listOpts.TimeoutSeconds != nil {
		timeout = time.Duration(*listOpts.TimeoutSeconds) * time.Second
	}
	return c.client.Delete().
		Namespace(c.ns).
		Resource("proactiveconfs").
		VersionedParams(&listOpts, scheme.ParameterCodec).
		Timeout(timeout).
		Body(&opts).
		Do(ctx).
		Error()
}

// Patch applies the patch and returns the patched proactiveConf.
func (c *proactiveConfs) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts metav1.PatchOptions, subresources ...string) (result *v1.ProactiveConf, err error) {
	result = &v1.ProactiveConf{}
	err = c.client.Patch(pt).
		Namespace(c.ns).
		Resource("proactiveconfs").
		Name(name).
		SubResource(subresources...).
		VersionedParams(&opts, scheme.ParameterCodec).
		Body(data).
		Do(ctx).
		Into(result)
	return
}

// Apply takes the given apply declarative configuration, applies it and returns the applied proactiveConf.
func (c *proactiveConfs) Apply(ctx context.Context, proactiveConf *acipcv1.ProactiveConfApplyConfiguration, opts metav1.ApplyOptions) (result *v1.ProactiveConf, err error) {
	if proactiveConf == nil {
		return nil, fmt.Errorf("proactiveConf provided to Apply must not be nil")
	}
	patchOpts := opts.ToPatchOptions()
	data, err := json.Marshal(proactiveConf)
	if err != nil {
		return nil, err
	}
	name := proactiveConf.Name
	if name == nil {
		return nil, fmt.Errorf("proactiveConf.Name must be provided to Apply")
	}
	result = &v1.ProactiveConf{}
	err = c.client.Patch(types.ApplyPatchType).
		Namespace(c.ns).
		Resource("proactiveconfs").
		Name(*name).
		VersionedParams(&patchOpts, scheme.ParameterCodec).
		Body(data).
		Do(ctx).
		Into(result)
	return
}
