/***
Copyright 2021 Cisco Systems Inc. All rights reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/noironetworks/aci-containers/pkg/proactiveconf/apis/aci.pc/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ProactiveConfLister helps list ProactiveConfs.
// All objects returned here must be treated as read-only.
type ProactiveConfLister interface {
	// List lists all ProactiveConfs in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.ProactiveConf, err error)
	// ProactiveConfs returns an object that can list and get ProactiveConfs.
	ProactiveConfs(namespace string) ProactiveConfNamespaceLister
	ProactiveConfListerExpansion
}

// proactiveConfLister implements the ProactiveConfLister interface.
type proactiveConfLister struct {
	indexer cache.Indexer
}

// NewProactiveConfLister returns a new ProactiveConfLister.
func NewProactiveConfLister(indexer cache.Indexer) ProactiveConfLister {
	return &proactiveConfLister{indexer: indexer}
}

// List lists all ProactiveConfs in the indexer.
func (s *proactiveConfLister) List(selector labels.Selector) (ret []*v1.ProactiveConf, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.ProactiveConf))
	})
	return ret, err
}

// ProactiveConfs returns an object that can list and get ProactiveConfs.
func (s *proactiveConfLister) ProactiveConfs(namespace string) ProactiveConfNamespaceLister {
	return proactiveConfNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ProactiveConfNamespaceLister helps list and get ProactiveConfs.
// All objects returned here must be treated as read-only.
type ProactiveConfNamespaceLister interface {
	// List lists all ProactiveConfs in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.ProactiveConf, err error)
	// Get retrieves the ProactiveConf from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.ProactiveConf, error)
	ProactiveConfNamespaceListerExpansion
}

// proactiveConfNamespaceLister implements the ProactiveConfNamespaceLister
// interface.
type proactiveConfNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ProactiveConfs in the indexer for a given namespace.
func (s proactiveConfNamespaceLister) List(selector labels.Selector) (ret []*v1.ProactiveConf, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.ProactiveConf))
	})
	return ret, err
}

// Get retrieves the ProactiveConf from the indexer for a given namespace and name.
func (s proactiveConfNamespaceLister) Get(name string) (*v1.ProactiveConf, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("proactiveconf"), name)
	}
	return obj.(*v1.ProactiveConf), nil
}
