/***
Copyright 2021 Cisco Systems Inc. All rights reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

// HostprotRuleApplyConfiguration represents an declarative configuration of the HostprotRule type for use
// with apply.
type HostprotRuleApplyConfiguration struct {
	Name                     *string                                     `json:"name,omitempty"`
	Direction                *string                                     `json:"direction,omitempty"`
	Ethertype                *string                                     `json:"ethertype,omitempty"`
	ConnTrack                *string                                     `json:"connTrack,omitempty"`
	Protocol                 *string                                     `json:"protocol,omitempty"`
	ToPort                   *string                                     `json:"toPort,omitempty"`
	FromPort                 *string                                     `json:"fromPort,omitempty"`
	RsRemoteIpContainer      []string                                    `json:"rsRemoteIpContainer,omitempty"`
	HostprotFilterContainer  []HostprotFilterContainerApplyConfiguration `json:"hostprotFilterContainer,omitempty"`
	HostprotRemoteIp         []HostprotRemoteIpApplyConfiguration        `json:"hostprotRemoteIp,omitempty"`
	HostprotServiceRemoteIps []string                                    `json:"hostprotServiceRemoteIps,omitempty"`
}

// HostprotRuleApplyConfiguration constructs an declarative configuration of the HostprotRule type for use with
// apply.
func HostprotRule() *HostprotRuleApplyConfiguration {
	return &HostprotRuleApplyConfiguration{}
}

// WithName sets the Name field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Name field is set to the value of the last call.
func (b *HostprotRuleApplyConfiguration) WithName(value string) *HostprotRuleApplyConfiguration {
	b.Name = &value
	return b
}

// WithDirection sets the Direction field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Direction field is set to the value of the last call.
func (b *HostprotRuleApplyConfiguration) WithDirection(value string) *HostprotRuleApplyConfiguration {
	b.Direction = &value
	return b
}

// WithEthertype sets the Ethertype field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Ethertype field is set to the value of the last call.
func (b *HostprotRuleApplyConfiguration) WithEthertype(value string) *HostprotRuleApplyConfiguration {
	b.Ethertype = &value
	return b
}

// WithConnTrack sets the ConnTrack field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ConnTrack field is set to the value of the last call.
func (b *HostprotRuleApplyConfiguration) WithConnTrack(value string) *HostprotRuleApplyConfiguration {
	b.ConnTrack = &value
	return b
}

// WithProtocol sets the Protocol field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Protocol field is set to the value of the last call.
func (b *HostprotRuleApplyConfiguration) WithProtocol(value string) *HostprotRuleApplyConfiguration {
	b.Protocol = &value
	return b
}

// WithToPort sets the ToPort field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ToPort field is set to the value of the last call.
func (b *HostprotRuleApplyConfiguration) WithToPort(value string) *HostprotRuleApplyConfiguration {
	b.ToPort = &value
	return b
}

// WithFromPort sets the FromPort field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the FromPort field is set to the value of the last call.
func (b *HostprotRuleApplyConfiguration) WithFromPort(value string) *HostprotRuleApplyConfiguration {
	b.FromPort = &value
	return b
}

// WithRsRemoteIpContainer adds the given value to the RsRemoteIpContainer field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the RsRemoteIpContainer field.
func (b *HostprotRuleApplyConfiguration) WithRsRemoteIpContainer(values ...string) *HostprotRuleApplyConfiguration {
	for i := range values {
		b.RsRemoteIpContainer = append(b.RsRemoteIpContainer, values[i])
	}
	return b
}

// WithHostprotFilterContainer adds the given value to the HostprotFilterContainer field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the HostprotFilterContainer field.
func (b *HostprotRuleApplyConfiguration) WithHostprotFilterContainer(values ...*HostprotFilterContainerApplyConfiguration) *HostprotRuleApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithHostprotFilterContainer")
		}
		b.HostprotFilterContainer = append(b.HostprotFilterContainer, *values[i])
	}
	return b
}

// WithHostprotRemoteIp adds the given value to the HostprotRemoteIp field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the HostprotRemoteIp field.
func (b *HostprotRuleApplyConfiguration) WithHostprotRemoteIp(values ...*HostprotRemoteIpApplyConfiguration) *HostprotRuleApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithHostprotRemoteIp")
		}
		b.HostprotRemoteIp = append(b.HostprotRemoteIp, *values[i])
	}
	return b
}

// WithHostprotServiceRemoteIps adds the given value to the HostprotServiceRemoteIps field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the HostprotServiceRemoteIps field.
func (b *HostprotRuleApplyConfiguration) WithHostprotServiceRemoteIps(values ...string) *HostprotRuleApplyConfiguration {
	for i := range values {
		b.HostprotServiceRemoteIps = append(b.HostprotServiceRemoteIps, values[i])
	}
	return b
}
