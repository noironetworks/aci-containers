/***
Copyright 2021 Cisco Systems Inc. All rights reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/noironetworks/aci-containers/pkg/fabricattachment/apis/aci.fabricattachment/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// NodeFabricNetworkAttachmentLister helps list NodeFabricNetworkAttachments.
// All objects returned here must be treated as read-only.
type NodeFabricNetworkAttachmentLister interface {
	// List lists all NodeFabricNetworkAttachments in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.NodeFabricNetworkAttachment, err error)
	// NodeFabricNetworkAttachments returns an object that can list and get NodeFabricNetworkAttachments.
	NodeFabricNetworkAttachments(namespace string) NodeFabricNetworkAttachmentNamespaceLister
	NodeFabricNetworkAttachmentListerExpansion
}

// nodeFabricNetworkAttachmentLister implements the NodeFabricNetworkAttachmentLister interface.
type nodeFabricNetworkAttachmentLister struct {
	indexer cache.Indexer
}

// NewNodeFabricNetworkAttachmentLister returns a new NodeFabricNetworkAttachmentLister.
func NewNodeFabricNetworkAttachmentLister(indexer cache.Indexer) NodeFabricNetworkAttachmentLister {
	return &nodeFabricNetworkAttachmentLister{indexer: indexer}
}

// List lists all NodeFabricNetworkAttachments in the indexer.
func (s *nodeFabricNetworkAttachmentLister) List(selector labels.Selector) (ret []*v1.NodeFabricNetworkAttachment, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.NodeFabricNetworkAttachment))
	})
	return ret, err
}

// NodeFabricNetworkAttachments returns an object that can list and get NodeFabricNetworkAttachments.
func (s *nodeFabricNetworkAttachmentLister) NodeFabricNetworkAttachments(namespace string) NodeFabricNetworkAttachmentNamespaceLister {
	return nodeFabricNetworkAttachmentNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// NodeFabricNetworkAttachmentNamespaceLister helps list and get NodeFabricNetworkAttachments.
// All objects returned here must be treated as read-only.
type NodeFabricNetworkAttachmentNamespaceLister interface {
	// List lists all NodeFabricNetworkAttachments in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.NodeFabricNetworkAttachment, err error)
	// Get retrieves the NodeFabricNetworkAttachment from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.NodeFabricNetworkAttachment, error)
	NodeFabricNetworkAttachmentNamespaceListerExpansion
}

// nodeFabricNetworkAttachmentNamespaceLister implements the NodeFabricNetworkAttachmentNamespaceLister
// interface.
type nodeFabricNetworkAttachmentNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all NodeFabricNetworkAttachments in the indexer for a given namespace.
func (s nodeFabricNetworkAttachmentNamespaceLister) List(selector labels.Selector) (ret []*v1.NodeFabricNetworkAttachment, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.NodeFabricNetworkAttachment))
	})
	return ret, err
}

// Get retrieves the NodeFabricNetworkAttachment from the indexer for a given namespace and name.
func (s nodeFabricNetworkAttachmentNamespaceLister) Get(name string) (*v1.NodeFabricNetworkAttachment, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("nodefabricnetworkattachment"), name)
	}
	return obj.(*v1.NodeFabricNetworkAttachment), nil
}
