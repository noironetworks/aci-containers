/***
Copyright 2021 Cisco Systems Inc. All rights reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/noironetworks/aci-containers/pkg/fabricattachment/apis/aci.fabricattachment/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// FabricNetworkAttachmentLister helps list FabricNetworkAttachments.
// All objects returned here must be treated as read-only.
type FabricNetworkAttachmentLister interface {
	// List lists all FabricNetworkAttachments in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.FabricNetworkAttachment, err error)
	// FabricNetworkAttachments returns an object that can list and get FabricNetworkAttachments.
	FabricNetworkAttachments(namespace string) FabricNetworkAttachmentNamespaceLister
	FabricNetworkAttachmentListerExpansion
}

// fabricNetworkAttachmentLister implements the FabricNetworkAttachmentLister interface.
type fabricNetworkAttachmentLister struct {
	indexer cache.Indexer
}

// NewFabricNetworkAttachmentLister returns a new FabricNetworkAttachmentLister.
func NewFabricNetworkAttachmentLister(indexer cache.Indexer) FabricNetworkAttachmentLister {
	return &fabricNetworkAttachmentLister{indexer: indexer}
}

// List lists all FabricNetworkAttachments in the indexer.
func (s *fabricNetworkAttachmentLister) List(selector labels.Selector) (ret []*v1.FabricNetworkAttachment, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.FabricNetworkAttachment))
	})
	return ret, err
}

// FabricNetworkAttachments returns an object that can list and get FabricNetworkAttachments.
func (s *fabricNetworkAttachmentLister) FabricNetworkAttachments(namespace string) FabricNetworkAttachmentNamespaceLister {
	return fabricNetworkAttachmentNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// FabricNetworkAttachmentNamespaceLister helps list and get FabricNetworkAttachments.
// All objects returned here must be treated as read-only.
type FabricNetworkAttachmentNamespaceLister interface {
	// List lists all FabricNetworkAttachments in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.FabricNetworkAttachment, err error)
	// Get retrieves the FabricNetworkAttachment from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.FabricNetworkAttachment, error)
	FabricNetworkAttachmentNamespaceListerExpansion
}

// fabricNetworkAttachmentNamespaceLister implements the FabricNetworkAttachmentNamespaceLister
// interface.
type fabricNetworkAttachmentNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all FabricNetworkAttachments in the indexer for a given namespace.
func (s fabricNetworkAttachmentNamespaceLister) List(selector labels.Selector) (ret []*v1.FabricNetworkAttachment, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.FabricNetworkAttachment))
	})
	return ret, err
}

// Get retrieves the FabricNetworkAttachment from the indexer for a given namespace and name.
func (s fabricNetworkAttachmentNamespaceLister) Get(name string) (*v1.FabricNetworkAttachment, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("fabricnetworkattachment"), name)
	}
	return obj.(*v1.FabricNetworkAttachment), nil
}
