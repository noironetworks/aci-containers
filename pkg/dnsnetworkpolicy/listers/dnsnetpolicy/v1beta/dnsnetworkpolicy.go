/***
Copyright 2021 Cisco Systems Inc. All rights reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1beta

import (
	v1beta "github.com/noironetworks/aci-containers/pkg/dnsnetworkpolicy/apis/dnsnetpolicy/v1beta"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// DnsNetworkPolicyLister helps list DnsNetworkPolicies.
// All objects returned here must be treated as read-only.
type DnsNetworkPolicyLister interface {
	// List lists all DnsNetworkPolicies in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1beta.DnsNetworkPolicy, err error)
	// DnsNetworkPolicies returns an object that can list and get DnsNetworkPolicies.
	DnsNetworkPolicies(namespace string) DnsNetworkPolicyNamespaceLister
	DnsNetworkPolicyListerExpansion
}

// dnsNetworkPolicyLister implements the DnsNetworkPolicyLister interface.
type dnsNetworkPolicyLister struct {
	indexer cache.Indexer
}

// NewDnsNetworkPolicyLister returns a new DnsNetworkPolicyLister.
func NewDnsNetworkPolicyLister(indexer cache.Indexer) DnsNetworkPolicyLister {
	return &dnsNetworkPolicyLister{indexer: indexer}
}

// List lists all DnsNetworkPolicies in the indexer.
func (s *dnsNetworkPolicyLister) List(selector labels.Selector) (ret []*v1beta.DnsNetworkPolicy, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta.DnsNetworkPolicy))
	})
	return ret, err
}

// DnsNetworkPolicies returns an object that can list and get DnsNetworkPolicies.
func (s *dnsNetworkPolicyLister) DnsNetworkPolicies(namespace string) DnsNetworkPolicyNamespaceLister {
	return dnsNetworkPolicyNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DnsNetworkPolicyNamespaceLister helps list and get DnsNetworkPolicies.
// All objects returned here must be treated as read-only.
type DnsNetworkPolicyNamespaceLister interface {
	// List lists all DnsNetworkPolicies in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1beta.DnsNetworkPolicy, err error)
	// Get retrieves the DnsNetworkPolicy from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1beta.DnsNetworkPolicy, error)
	DnsNetworkPolicyNamespaceListerExpansion
}

// dnsNetworkPolicyNamespaceLister implements the DnsNetworkPolicyNamespaceLister
// interface.
type dnsNetworkPolicyNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all DnsNetworkPolicies in the indexer for a given namespace.
func (s dnsNetworkPolicyNamespaceLister) List(selector labels.Selector) (ret []*v1beta.DnsNetworkPolicy, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta.DnsNetworkPolicy))
	})
	return ret, err
}

// Get retrieves the DnsNetworkPolicy from the indexer for a given namespace and name.
func (s dnsNetworkPolicyNamespaceLister) Get(name string) (*v1beta.DnsNetworkPolicy, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1beta.Resource("dnsnetworkpolicy"), name)
	}
	return obj.(*v1beta.DnsNetworkPolicy), nil
}
