/***
Copyright 2019 Cisco Systems Inc. All rights reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/noironetworks/aci-containers/pkg/snatglobalinfo/apis/aci.snat/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// SnatGlobalInfoLister helps list SnatGlobalInfos.
type SnatGlobalInfoLister interface {
	// List lists all SnatGlobalInfos in the indexer.
	List(selector labels.Selector) (ret []*v1.SnatGlobalInfo, err error)
	// SnatGlobalInfos returns an object that can list and get SnatGlobalInfos.
	SnatGlobalInfos(namespace string) SnatGlobalInfoNamespaceLister
	SnatGlobalInfoListerExpansion
}

// snatGlobalInfoLister implements the SnatGlobalInfoLister interface.
type snatGlobalInfoLister struct {
	indexer cache.Indexer
}

// NewSnatGlobalInfoLister returns a new SnatGlobalInfoLister.
func NewSnatGlobalInfoLister(indexer cache.Indexer) SnatGlobalInfoLister {
	return &snatGlobalInfoLister{indexer: indexer}
}

// List lists all SnatGlobalInfos in the indexer.
func (s *snatGlobalInfoLister) List(selector labels.Selector) (ret []*v1.SnatGlobalInfo, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.SnatGlobalInfo))
	})
	return ret, err
}

// SnatGlobalInfos returns an object that can list and get SnatGlobalInfos.
func (s *snatGlobalInfoLister) SnatGlobalInfos(namespace string) SnatGlobalInfoNamespaceLister {
	return snatGlobalInfoNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SnatGlobalInfoNamespaceLister helps list and get SnatGlobalInfos.
type SnatGlobalInfoNamespaceLister interface {
	// List lists all SnatGlobalInfos in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.SnatGlobalInfo, err error)
	// Get retrieves the SnatGlobalInfo from the indexer for a given namespace and name.
	Get(name string) (*v1.SnatGlobalInfo, error)
	SnatGlobalInfoNamespaceListerExpansion
}

// snatGlobalInfoNamespaceLister implements the SnatGlobalInfoNamespaceLister
// interface.
type snatGlobalInfoNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all SnatGlobalInfos in the indexer for a given namespace.
func (s snatGlobalInfoNamespaceLister) List(selector labels.Selector) (ret []*v1.SnatGlobalInfo, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.SnatGlobalInfo))
	})
	return ret, err
}

// Get retrieves the SnatGlobalInfo from the indexer for a given namespace and name.
func (s snatGlobalInfoNamespaceLister) Get(name string) (*v1.SnatGlobalInfo, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("snatglobalinfo"), name)
	}
	return obj.(*v1.SnatGlobalInfo), nil
}
