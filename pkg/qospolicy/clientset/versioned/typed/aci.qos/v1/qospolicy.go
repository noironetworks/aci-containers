/***
Copyright 2020 Cisco Systems Inc. All rights reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by client-gen. DO NOT EDIT.

package v1

import (
	"context"
	"time"

	v1 "github.com/noironetworks/aci-containers/pkg/qospolicy/apis/aci.qos/v1"
	scheme "github.com/noironetworks/aci-containers/pkg/qospolicy/clientset/versioned/scheme"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	rest "k8s.io/client-go/rest"
)

// QosPoliciesGetter has a method to return a QosPolicyInterface.
// A group's client should implement this interface.
type QosPoliciesGetter interface {
	QosPolicies() QosPolicyInterface
}

// QosPolicyInterface has methods to work with QosPolicy resources.
type QosPolicyInterface interface {
	Create(ctx context.Context, qosPolicy *v1.QosPolicy) (*v1.QosPolicy, error)
	Update(ctx context.Context, qosPolicy *v1.QosPolicy) (*v1.QosPolicy, error)
	UpdateStatus(ctx context.Context, qosPolicy *v1.QosPolicy) (*v1.QosPolicy, error)
	Delete(ctx context.Context, name string, options *metav1.DeleteOptions) error
	DeleteCollection(ctx context.Context, options *metav1.DeleteOptions, listOptions metav1.ListOptions) error
	Get(ctx context.Context, name string, options metav1.GetOptions) (*v1.QosPolicy, error)
	List(ctx context.Context, opts metav1.ListOptions) (*v1.QosPolicyList, error)
	Watch(ctx context.Context, opts metav1.ListOptions) (watch.Interface, error)
	Patch(ctx context.Context, name string, pt types.PatchType, data []byte, subresources ...string) (result *v1.QosPolicy, err error)
	QosPolicyExpansion
}

// qosPolicies implements QosPolicyInterface
type qosPolicies struct {
	client rest.Interface
}

// newQosPolicies returns a QosPolicies
func newQosPolicies(c *AciV1Client) *qosPolicies {
	return &qosPolicies{
		client: c.RESTClient(),
	}
}

// Get takes name of the qosPolicy, and returns the corresponding qosPolicy object, and an error if there is any.
func (c *qosPolicies) Get(ctx context.Context, name string, options metav1.GetOptions) (result *v1.QosPolicy, err error) {
	result = &v1.QosPolicy{}
	err = c.client.Get().
		Resource("qospolicies").
		Name(name).
		VersionedParams(&options, scheme.ParameterCodec).
		Do(ctx).
		Into(result)
	return
}

// List takes label and field selectors, and returns the list of QosPolicies that match those selectors.
func (c *qosPolicies) List(ctx context.Context, opts metav1.ListOptions) (result *v1.QosPolicyList, err error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	result = &v1.QosPolicyList{}
	err = c.client.Get().
		Resource("qospolicies").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Do(ctx).
		Into(result)
	return
}

// Watch returns a watch.Interface that watches the requested qosPolicies.
func (c *qosPolicies) Watch(ctx context.Context, opts metav1.ListOptions) (watch.Interface, error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	opts.Watch = true
	return c.client.Get().
		Resource("qospolicies").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Watch(ctx)
}

// Create takes the representation of a qosPolicy and creates it.  Returns the server's representation of the qosPolicy, and an error, if there is any.
func (c *qosPolicies) Create(ctx context.Context, qosPolicy *v1.QosPolicy) (result *v1.QosPolicy, err error) {
	result = &v1.QosPolicy{}
	err = c.client.Post().
		Resource("qospolicies").
		Body(qosPolicy).
		Do(ctx).
		Into(result)
	return
}

// Update takes the representation of a qosPolicy and updates it. Returns the server's representation of the qosPolicy, and an error, if there is any.
func (c *qosPolicies) Update(ctx context.Context, qosPolicy *v1.QosPolicy) (result *v1.QosPolicy, err error) {
	result = &v1.QosPolicy{}
	err = c.client.Put().
		Resource("qospolicies").
		Name(qosPolicy.Name).
		Body(qosPolicy).
		Do(ctx).
		Into(result)
	return
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().

func (c *qosPolicies) UpdateStatus(ctx context.Context, qosPolicy *v1.QosPolicy) (result *v1.QosPolicy, err error) {
	result = &v1.QosPolicy{}
	err = c.client.Put().
		Resource("qospolicies").
		Name(qosPolicy.Name).
		SubResource("status").
		Body(qosPolicy).
		Do(ctx).
		Into(result)
	return
}

// Delete takes name of the qosPolicy and deletes it. Returns an error if one occurs.
func (c *qosPolicies) Delete(ctx context.Context, name string, options *metav1.DeleteOptions) error {
	return c.client.Delete().
		Resource("qospolicies").
		Name(name).
		Body(options).
		Do(ctx).
		Error()
}

// DeleteCollection deletes a collection of objects.
func (c *qosPolicies) DeleteCollection(ctx context.Context, options *metav1.DeleteOptions, listOptions metav1.ListOptions) error {
	var timeout time.Duration
	if listOptions.TimeoutSeconds != nil {
		timeout = time.Duration(*listOptions.TimeoutSeconds) * time.Second
	}
	return c.client.Delete().
		Resource("qospolicies").
		VersionedParams(&listOptions, scheme.ParameterCodec).
		Timeout(timeout).
		Body(options).
		Do(ctx).
		Error()
}

// Patch applies the patch and returns the patched qosPolicy.
func (c *qosPolicies) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, subresources ...string) (result *v1.QosPolicy, err error) {
	result = &v1.QosPolicy{}
	err = c.client.Patch(pt).
		Resource("qospolicies").
		SubResource(subresources...).
		Name(name).
		Body(data).
		Do(ctx).
		Into(result)
	return
}
