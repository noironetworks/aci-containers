/***
Copyright 2021 Cisco Systems Inc. All rights reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/noironetworks/aci-containers/pkg/oobpolicy/apis/aci.oob/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// OutOfBandPolicyLister helps list OutOfBandPolicies.
// All objects returned here must be treated as read-only.
type OutOfBandPolicyLister interface {
	// List lists all OutOfBandPolicies in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.OutOfBandPolicy, err error)
	// OutOfBandPolicies returns an object that can list and get OutOfBandPolicies.
	OutOfBandPolicies(namespace string) OutOfBandPolicyNamespaceLister
	OutOfBandPolicyListerExpansion
}

// outOfBandPolicyLister implements the OutOfBandPolicyLister interface.
type outOfBandPolicyLister struct {
	indexer cache.Indexer
}

// NewOutOfBandPolicyLister returns a new OutOfBandPolicyLister.
func NewOutOfBandPolicyLister(indexer cache.Indexer) OutOfBandPolicyLister {
	return &outOfBandPolicyLister{indexer: indexer}
}

// List lists all OutOfBandPolicies in the indexer.
func (s *outOfBandPolicyLister) List(selector labels.Selector) (ret []*v1.OutOfBandPolicy, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.OutOfBandPolicy))
	})
	return ret, err
}

// OutOfBandPolicies returns an object that can list and get OutOfBandPolicies.
func (s *outOfBandPolicyLister) OutOfBandPolicies(namespace string) OutOfBandPolicyNamespaceLister {
	return outOfBandPolicyNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// OutOfBandPolicyNamespaceLister helps list and get OutOfBandPolicies.
// All objects returned here must be treated as read-only.
type OutOfBandPolicyNamespaceLister interface {
	// List lists all OutOfBandPolicies in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.OutOfBandPolicy, err error)
	// Get retrieves the OutOfBandPolicy from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.OutOfBandPolicy, error)
	OutOfBandPolicyNamespaceListerExpansion
}

// outOfBandPolicyNamespaceLister implements the OutOfBandPolicyNamespaceLister
// interface.
type outOfBandPolicyNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all OutOfBandPolicies in the indexer for a given namespace.
func (s outOfBandPolicyNamespaceLister) List(selector labels.Selector) (ret []*v1.OutOfBandPolicy, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.OutOfBandPolicy))
	})
	return ret, err
}

// Get retrieves the OutOfBandPolicy from the indexer for a given namespace and name.
func (s outOfBandPolicyNamespaceLister) Get(name string) (*v1.OutOfBandPolicy, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("outofbandpolicy"), name)
	}
	return obj.(*v1.OutOfBandPolicy), nil
}
