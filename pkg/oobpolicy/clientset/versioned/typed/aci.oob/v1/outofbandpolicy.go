/***
Copyright 2021 Cisco Systems Inc. All rights reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by client-gen. DO NOT EDIT.

package v1

import (
	"context"
	json "encoding/json"
	"fmt"
	"time"

	v1 "github.com/noironetworks/aci-containers/pkg/oobpolicy/apis/aci.oob/v1"
	acioobv1 "github.com/noironetworks/aci-containers/pkg/oobpolicy/applyconfiguration/aci.oob/v1"
	scheme "github.com/noironetworks/aci-containers/pkg/oobpolicy/clientset/versioned/scheme"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	rest "k8s.io/client-go/rest"
)

// OutOfBandPoliciesGetter has a method to return a OutOfBandPolicyInterface.
// A group's client should implement this interface.
type OutOfBandPoliciesGetter interface {
	OutOfBandPolicies(namespace string) OutOfBandPolicyInterface
}

// OutOfBandPolicyInterface has methods to work with OutOfBandPolicy resources.
type OutOfBandPolicyInterface interface {
	Create(ctx context.Context, outOfBandPolicy *v1.OutOfBandPolicy, opts metav1.CreateOptions) (*v1.OutOfBandPolicy, error)
	Update(ctx context.Context, outOfBandPolicy *v1.OutOfBandPolicy, opts metav1.UpdateOptions) (*v1.OutOfBandPolicy, error)
	Delete(ctx context.Context, name string, opts metav1.DeleteOptions) error
	DeleteCollection(ctx context.Context, opts metav1.DeleteOptions, listOpts metav1.ListOptions) error
	Get(ctx context.Context, name string, opts metav1.GetOptions) (*v1.OutOfBandPolicy, error)
	List(ctx context.Context, opts metav1.ListOptions) (*v1.OutOfBandPolicyList, error)
	Watch(ctx context.Context, opts metav1.ListOptions) (watch.Interface, error)
	Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts metav1.PatchOptions, subresources ...string) (result *v1.OutOfBandPolicy, err error)
	Apply(ctx context.Context, outOfBandPolicy *acioobv1.OutOfBandPolicyApplyConfiguration, opts metav1.ApplyOptions) (result *v1.OutOfBandPolicy, err error)
	OutOfBandPolicyExpansion
}

// outOfBandPolicies implements OutOfBandPolicyInterface
type outOfBandPolicies struct {
	client rest.Interface
	ns     string
}

// newOutOfBandPolicies returns a OutOfBandPolicies
func newOutOfBandPolicies(c *AciV1Client, namespace string) *outOfBandPolicies {
	return &outOfBandPolicies{
		client: c.RESTClient(),
		ns:     namespace,
	}
}

// Get takes name of the outOfBandPolicy, and returns the corresponding outOfBandPolicy object, and an error if there is any.
func (c *outOfBandPolicies) Get(ctx context.Context, name string, options metav1.GetOptions) (result *v1.OutOfBandPolicy, err error) {
	result = &v1.OutOfBandPolicy{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("outofbandpolicies").
		Name(name).
		VersionedParams(&options, scheme.ParameterCodec).
		Do(ctx).
		Into(result)
	return
}

// List takes label and field selectors, and returns the list of OutOfBandPolicies that match those selectors.
func (c *outOfBandPolicies) List(ctx context.Context, opts metav1.ListOptions) (result *v1.OutOfBandPolicyList, err error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	result = &v1.OutOfBandPolicyList{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("outofbandpolicies").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Do(ctx).
		Into(result)
	return
}

// Watch returns a watch.Interface that watches the requested outOfBandPolicies.
func (c *outOfBandPolicies) Watch(ctx context.Context, opts metav1.ListOptions) (watch.Interface, error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	opts.Watch = true
	return c.client.Get().
		Namespace(c.ns).
		Resource("outofbandpolicies").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Watch(ctx)
}

// Create takes the representation of a outOfBandPolicy and creates it.  Returns the server's representation of the outOfBandPolicy, and an error, if there is any.
func (c *outOfBandPolicies) Create(ctx context.Context, outOfBandPolicy *v1.OutOfBandPolicy, opts metav1.CreateOptions) (result *v1.OutOfBandPolicy, err error) {
	result = &v1.OutOfBandPolicy{}
	err = c.client.Post().
		Namespace(c.ns).
		Resource("outofbandpolicies").
		VersionedParams(&opts, scheme.ParameterCodec).
		Body(outOfBandPolicy).
		Do(ctx).
		Into(result)
	return
}

// Update takes the representation of a outOfBandPolicy and updates it. Returns the server's representation of the outOfBandPolicy, and an error, if there is any.
func (c *outOfBandPolicies) Update(ctx context.Context, outOfBandPolicy *v1.OutOfBandPolicy, opts metav1.UpdateOptions) (result *v1.OutOfBandPolicy, err error) {
	result = &v1.OutOfBandPolicy{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("outofbandpolicies").
		Name(outOfBandPolicy.Name).
		VersionedParams(&opts, scheme.ParameterCodec).
		Body(outOfBandPolicy).
		Do(ctx).
		Into(result)
	return
}

// Delete takes name of the outOfBandPolicy and deletes it. Returns an error if one occurs.
func (c *outOfBandPolicies) Delete(ctx context.Context, name string, opts metav1.DeleteOptions) error {
	return c.client.Delete().
		Namespace(c.ns).
		Resource("outofbandpolicies").
		Name(name).
		Body(&opts).
		Do(ctx).
		Error()
}

// DeleteCollection deletes a collection of objects.
func (c *outOfBandPolicies) DeleteCollection(ctx context.Context, opts metav1.DeleteOptions, listOpts metav1.ListOptions) error {
	var timeout time.Duration
	if listOpts.TimeoutSeconds != nil {
		timeout = time.Duration(*listOpts.TimeoutSeconds) * time.Second
	}
	return c.client.Delete().
		Namespace(c.ns).
		Resource("outofbandpolicies").
		VersionedParams(&listOpts, scheme.ParameterCodec).
		Timeout(timeout).
		Body(&opts).
		Do(ctx).
		Error()
}

// Patch applies the patch and returns the patched outOfBandPolicy.
func (c *outOfBandPolicies) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts metav1.PatchOptions, subresources ...string) (result *v1.OutOfBandPolicy, err error) {
	result = &v1.OutOfBandPolicy{}
	err = c.client.Patch(pt).
		Namespace(c.ns).
		Resource("outofbandpolicies").
		Name(name).
		SubResource(subresources...).
		VersionedParams(&opts, scheme.ParameterCodec).
		Body(data).
		Do(ctx).
		Into(result)
	return
}

// Apply takes the given apply declarative configuration, applies it and returns the applied outOfBandPolicy.
func (c *outOfBandPolicies) Apply(ctx context.Context, outOfBandPolicy *acioobv1.OutOfBandPolicyApplyConfiguration, opts metav1.ApplyOptions) (result *v1.OutOfBandPolicy, err error) {
	if outOfBandPolicy == nil {
		return nil, fmt.Errorf("outOfBandPolicy provided to Apply must not be nil")
	}
	patchOpts := opts.ToPatchOptions()
	data, err := json.Marshal(outOfBandPolicy)
	if err != nil {
		return nil, err
	}
	name := outOfBandPolicy.Name
	if name == nil {
		return nil, fmt.Errorf("outOfBandPolicy.Name must be provided to Apply")
	}
	result = &v1.OutOfBandPolicy{}
	err = c.client.Patch(types.ApplyPatchType).
		Namespace(c.ns).
		Resource("outofbandpolicies").
		Name(*name).
		VersionedParams(&patchOpts, scheme.ParameterCodec).
		Body(data).
		Do(ctx).
		Into(result)
	return
}
