apiVersion: v1
kind: ConfigMap
metadata:
  name: aci-containers-config
  namespace: kube-system
  labels:
    aci-containers-config-version: "{{ config.registry.configuration_version }}"
    network-plugin: aci-containers
data:
  controller-config: |-
    {
        "log-level": {{config.logging.controller_log_level|json}},
        "apic-hosts": {{config.aci_config.apic_hosts|json|indent(width=8)}},
        "apic-username": {{config.aci_config.sync_login.username|json}},
        "apic-private-key-path": "/usr/local/etc/aci-cert/user.key",
        "aci-prefix": {{config.aci_config.system_id|json}},
        "aci-vmm-type": {{config.aci_config.vmm_domain.type|json}},
        "aci-vmm-domain": {{config.aci_config.vmm_domain.domain|json}},
        "aci-vmm-controller": {{config.aci_config.vmm_domain.controller|json}},
        "aci-policy-tenant": {{config.kube_config.default_endpoint_group.tenant|json}},
        "require-netpol-annot": {{config.kube_config.use_netpol_annotation|json}},
        "aci-service-phys-dom": {{config.aci_config.physical_domain.domain|json}},
        "aci-service-encap": {{ ("vlan-" ~ config.net_config.service_vlan)|json }},
        "aci-service-monitor-interval": {{ config.net_config.service_monitor_interval|json }},
        "aci-vrf-tenant": {{config.aci_config.vrf.tenant|json}},
        "aci-l3out": {{config.aci_config.l3out.name|json}},
        "aci-ext-networks": {{ config.aci_config.l3out.external_networks|json|indent(width=8) }},
        "aci-vrf": {{config.aci_config.vrf.name|json}},
        "default-endpoint-group": {
            "policy-space": {{config.kube_config.default_endpoint_group.tenant|json}},
            "name": {{(config.kube_config.default_endpoint_group.app_profile ~ "|" ~ config.kube_config.default_endpoint_group.group)|json}}
        },
        "namespace-default-endpoint-group": {
            {% for ns, val in config.kube_config.namespace_default_endpoint_group.iteritems() %}
            "{{ns}}": {
                "policy-space": {{val['tenant']|json}},
                "name": {{(val['app_profile'] ~ "|" ~ val['group'])|json}}
            }
            {% endfor %}
        },
        "service-ip-pool": {{ config.kube_config.service_ip_pool|json|indent(width=8) }},
        "static-service-ip-pool": {{ config.kube_config.static_service_ip_pool|json|indent(width=8) }},
        {% if config.kube_config.use_external_service_ip_allocator %}
        "allocate-service-ips": false,
        {% endif %}
        "pod-ip-pool": {{ config.kube_config.pod_ip_pool|json|indent(width=8) }},
        "node-service-ip-pool": {{ config.kube_config.node_service_ip_pool|json|indent(width=8) }},
        "node-service-subnets": {{ config.kube_config.node_service_gw_subnets|json|indent(width=8) }}
    }
  host-agent-config: |-
    {
        "log-level": {{config.logging.hostagent_log_level|json}},
        "aci-vmm-type": {{config.aci_config.vmm_domain.type|json}},
        "aci-vmm-domain": {{config.aci_config.vmm_domain.domain|json}},
        "aci-vmm-controller": {{config.aci_config.vmm_domain.controller|json}},
        "aci-vrf": {{config.aci_config.vrf.name|json}},
        "aci-vrf-tenant": {{config.aci_config.vrf.tenant|json}},
        "service-vlan": {{ config.net_config.service_vlan|json }},
        "encap-type": {{ config.node_config.encap_type|json }},
        "aci-infra-vlan": {{ config.net_config.infra_vlan|json }},
        "cni-netconfig": {{ config.kube_config.pod_network|json|indent(width=8) }}
    }
  opflex-agent-config: |-
    {
        "log": {
            "level": {{config.logging.opflexagent_log_level|json}}
        },
        "opflex": {
          {% if not config.aci_config.client_ssl %}
            "ssl": { "mode": "disabled" }
          {% endif %}
        }
    }
---
apiVersion: v1
kind: Secret
metadata:
  name: aci-user-cert
  namespace: kube-system
  labels:
    aci-containers-config-version: "{{ config.registry.configuration_version }}"
data:
  user.key: {{config.aci_config.sync_login.key_data|base64enc}}
  user.crt: {{config.aci_config.sync_login.cert_data|base64enc}}
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: aci-containers-controller
  namespace: kube-system
  labels:
    aci-containers-config-version: "{{ config.registry.configuration_version }}"
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: aci-containers-host-agent
  namespace: kube-system
  labels:
    aci-containers-config-version: "{{ config.registry.configuration_version }}"
---
apiVersion: {{ config.kube_config.use_rbac_api }}
kind: ClusterRole
metadata:
  labels:
    aci-containers-config-version: "{{ config.registry.configuration_version }}"
    network-plugin: aci-containers
  name: aci-containers:controller
rules:
- apiGroups:
  - ""
  resources:
  - nodes
  - namespaces
  - pods
  - endpoints
  - services
  verbs:
  - list
  - watch
  - get
- apiGroups:
  - "{{ config.kube_config.use_netpol_apigroup }}"
  resources:
  - networkpolicies
  verbs:
  - list
  - watch
  - get
- apiGroups:
  - "{{ config.kube_config.use_apps_apigroup }}"
  resources:
  - deployments
  - replicasets
  verbs:
  - list
  - watch
  - get
- apiGroups:
  - ""
  resources:
  - pods
  - nodes
  - services/status
  verbs:
  - update
---
apiVersion: {{ config.kube_config.use_rbac_api }}
kind: ClusterRole
metadata:
  labels:
    aci-containers-config-version: "{{ config.registry.configuration_version }}"
    network-plugin: aci-containers
  name: aci-containers:host-agent
rules:
- apiGroups:
  - ""
  resources:
  - nodes
  - pods
  - endpoints
  - services
  verbs:
  - list
  - watch
  - get
---
apiVersion: {{ config.kube_config.use_rbac_api }}
kind: ClusterRoleBinding
metadata:
  name: aci-containers:controller
  labels:
    aci-containers-config-version: "{{ config.registry.configuration_version }}"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: aci-containers:controller
subjects:
- kind: ServiceAccount
  name: aci-containers-controller
  namespace: kube-system
---
apiVersion: {{ config.kube_config.use_rbac_api }}
kind: ClusterRoleBinding
metadata:
  name: aci-containers:host-agent
  labels:
    aci-containers-config-version: "{{ config.registry.configuration_version }}"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: aci-containers:host-agent
subjects:
- kind: ServiceAccount
  name: aci-containers-host-agent
  namespace: kube-system
---
{% if config.kube_config.use_openshift_security_context_constraints %}
kind: SecurityContextConstraints
apiVersion: v1
metadata:
  name: aci-containers-scc
  labels:
    aci-containers-config-version: "{{ config.registry.configuration_version }}"
users:
  - system:serviceaccount:kube-system:aci-containers-controller
  - system:serviceaccount:kube-system:aci-containers-host-agent
allowHostDirVolumePlugin: true
allowHostIPC: true
allowHostNetwork: true
allowHostPID: true
allowHostPorts: true
allowPrivilegedContainer: true
allowedCapabilities:
- '*'
defaultAddCapabilities: []
requiredDropCapabilities: []
readOnlyRootFilesystem: false
fsGroup:
  type: RunAsAny
runAsUser:
  type: RunAsAny
seLinuxContext:
  type: RunAsAny
supplementalGroups:
  type: RunAsAny
seccompProfiles:
- '*'
volumes:
- '*'
priority: 100
---
{% endif %}
apiVersion: {{ config.kube_config.use_apps_api }}
kind: DaemonSet
metadata:
  name: aci-containers-host
  namespace: kube-system
  labels:
    aci-containers-config-version: "{{ config.registry.configuration_version }}"
    network-plugin: aci-containers
spec:
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      name: aci-containers-host
      network-plugin: aci-containers
  template:
    metadata:
      labels:
        name: aci-containers-host
        network-plugin: aci-containers
      annotations:
        scheduler.alpha.kubernetes.io/critical-pod: ''
    spec:
      hostNetwork: true
      hostPID: true
      hostIPC: true
      serviceAccountName: aci-containers-host-agent
      {% if config.registry.image_pull_secret %}
      imagePullSecrets:
        - name: {{ config.registry.image_pull_secret|yaml_quote }}
      {% endif %}
      tolerations:
        - key: CriticalAddonsOnly
        - effect: NoSchedule
          key: node-role.kubernetes.io/master
      {% if config.kube_config.use_cnideploy_initcontainer %}
      initContainers:
        - name: cnideploy
          image: {{ config.registry.image_prefix }}/cnideploy:{{ config.registry.cnideploy_version }}
          imagePullPolicy: {{ config.kube_config.image_pull_policy }}
          securityContext:
            {% if config.kube_config.use_privileged_containers %}
            privileged: true
            {% endif %}
            capabilities:
              add:
                - SYS_ADMIN
          volumeMounts:
            - name: cni-bin
              mountPath: /mnt/cni-bin
      {% endif %}
      containers:
        - name: aci-containers-host
          image: {{ config.registry.image_prefix }}/aci-containers-host:{{ config.registry.aci_containers_host_version }}
          imagePullPolicy: {{ config.kube_config.image_pull_policy }}
          securityContext:
            {% if config.kube_config.use_privileged_containers %}
            privileged: true
            {% endif %}
            capabilities:
              add:
                - SYS_ADMIN
                - NET_ADMIN
          env:
            - name: KUBERNETES_NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
          volumeMounts:
            - name: cni-bin
              mountPath: /mnt/cni-bin
            - name: cni-conf
              mountPath: /mnt/cni-conf
            - name: hostvar
              mountPath: /usr/local/var
            - name: hostrun
              mountPath: /run
            - name: hostrun
              mountPath: /usr/local/run
            - name: opflex-hostconfig-volume
              mountPath: /usr/local/etc/opflex-agent-ovs/base-conf.d
            - name: host-config-volume
              mountPath: /usr/local/etc/aci-containers/
          livenessProbe:
            httpGet:
              path: /status
              port: 8090
        - name: opflex-agent
          image: {{ config.registry.image_prefix }}/opflex:{{ config.registry.opflex_agent_version }}
          imagePullPolicy: {{ config.kube_config.image_pull_policy }}
          securityContext:
            {% if config.kube_config.use_privileged_containers %}
            privileged: true
            {% endif %}
            capabilities:
              add:
                - NET_ADMIN
          volumeMounts:
            - name: hostvar
              mountPath: /usr/local/var
            - name: hostrun
              mountPath: /run
            - name: hostrun
              mountPath: /usr/local/run
            - name: opflex-hostconfig-volume
              mountPath: /usr/local/etc/opflex-agent-ovs/base-conf.d
            - name: opflex-config-volume
              mountPath: /usr/local/etc/opflex-agent-ovs/conf.d
        - name: mcast-daemon
          image: {{ config.registry.image_prefix }}/opflex:{{ config.registry.opflex_agent_version }}
          command: ["/bin/sh"]
          args: ["/usr/local/bin/launch-mcastdaemon.sh"]
          imagePullPolicy: {{ config.kube_config.image_pull_policy }}
          {% if config.kube_config.use_privileged_containers %}
          securityContext:
            privileged: true
          {% endif %}
          volumeMounts:
            - name: hostvar
              mountPath: /usr/local/var
            - name: hostrun
              mountPath: /run
            - name: hostrun
              mountPath: /usr/local/run
      restartPolicy: Always
      volumes:
        - name: cni-bin
          hostPath:
            path: /opt
        - name: cni-conf
          hostPath:
            path: /etc
        - name: hostvar
          hostPath:
            path: /var
        - name: hostrun
          hostPath:
            path: /run
        - name: host-config-volume
          configMap:
            name: aci-containers-config
            items:
              - key: host-agent-config
                path: host-agent.conf
        - name: opflex-hostconfig-volume
          emptyDir:
            medium: Memory
        - name: opflex-config-volume
          configMap:
            name: aci-containers-config
            items:
              - key: opflex-agent-config
                path: local.conf
---
apiVersion: {{ config.kube_config.use_apps_api }}
kind: DaemonSet
metadata:
  name: aci-containers-openvswitch
  namespace: kube-system
  labels:
    aci-containers-config-version: "{{ config.registry.configuration_version }}"
    network-plugin: aci-containers
spec:
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      name: aci-containers-openvswitch
      network-plugin: aci-containers
  template:
    metadata:
      labels:
        name: aci-containers-openvswitch
        network-plugin: aci-containers
      annotations:
        scheduler.alpha.kubernetes.io/critical-pod: ''
    spec:
      hostNetwork: true
      hostPID: true
      hostIPC: true
      serviceAccountName: aci-containers-host-agent
      {% if config.registry.image_pull_secret %}
      imagePullSecrets:
        - name: {{ config.registry.image_pull_secret|yaml_quote }}
      {% endif %}
      tolerations:
        - key: CriticalAddonsOnly
        - effect: NoSchedule
          key: node-role.kubernetes.io/master
      containers:
        - name: aci-containers-openvswitch
          image: {{ config.registry.image_prefix }}/openvswitch:{{ config.registry.openvswitch_version }}
          imagePullPolicy: {{ config.kube_config.image_pull_policy }}
          securityContext:
            {% if config.kube_config.use_privileged_containers %}
            privileged: true
            {% endif %}
            capabilities:
              add:
                - NET_ADMIN
                - SYS_MODULE
                - SYS_NICE
                - IPC_LOCK
          env:
            - name: OVS_RUNDIR
              value: /usr/local/var/run/openvswitch
          volumeMounts:
            - name: hostvar
              mountPath: /usr/local/var
            - name: hostrun
              mountPath: /run
            - name: hostrun
              mountPath: /usr/local/run
            - name: hostetc
              mountPath: /usr/local/etc
            - name: hostmodules
              mountPath: /lib/modules
          livenessProbe:
            exec:
              command:
                - /usr/local/bin/liveness-ovs.sh
      restartPolicy: Always
      volumes:
        - name: hostetc
          hostPath:
            path: /etc
        - name: hostvar
          hostPath:
            path: /var
        - name: hostrun
          hostPath:
            path: /run
        - name: hostmodules
          hostPath:
            path: /lib/modules
---
apiVersion: {{ config.kube_config.use_apps_api }}
kind: Deployment
metadata:
  name: aci-containers-controller
  namespace: kube-system
  labels:
    aci-containers-config-version: "{{ config.registry.configuration_version }}"
    network-plugin: aci-containers
    name: aci-containers-controller
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      name: aci-containers-controller
      network-plugin: aci-containers
  template:
    metadata:
      name: aci-containers-controller
      namespace: kube-system
      labels:
        name: aci-containers-controller
        network-plugin: aci-containers
      annotations:
        scheduler.alpha.kubernetes.io/critical-pod: ''
    spec:
      hostNetwork: true
      serviceAccountName: aci-containers-controller
      {% if config.registry.image_pull_secret %}
      imagePullSecrets:
        - name: {{ config.registry.image_pull_secret|yaml_quote }}
      {% endif %}
      tolerations:
        - key: CriticalAddonsOnly
      containers:
        - name: aci-containers-controller
          image: {{ config.registry.image_prefix }}/aci-containers-controller:{{ config.registry.aci_containers_controller_version }}
          imagePullPolicy: {{ config.kube_config.image_pull_policy }}
          volumeMounts:
            - name: controller-config-volume
              mountPath: /usr/local/etc/aci-containers/
            - name: aci-user-cert-volume
              mountPath: /usr/local/etc/aci-cert/
          livenessProbe:
            httpGet:
              path: /status
              port: 8091
      volumes:
        - name: aci-user-cert-volume
          secret:
            secretName: aci-user-cert
        - name: controller-config-volume
          configMap:
            name: aci-containers-config
            items:
              - key: controller-config
                path: controller.conf

