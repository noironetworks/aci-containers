// Code generated by counterfeiter. DO NOT EDIT.
package dbfakes

import (
	"context"
	"sync"

	"code.cloudfoundry.org/bbs/db"
	"code.cloudfoundry.org/lager"
)

type FakeDomainDB struct {
	FreshDomainsStub        func(context.Context, lager.Logger) ([]string, error)
	freshDomainsMutex       sync.RWMutex
	freshDomainsArgsForCall []struct {
		arg1 context.Context
		arg2 lager.Logger
	}
	freshDomainsReturns struct {
		result1 []string
		result2 error
	}
	freshDomainsReturnsOnCall map[int]struct {
		result1 []string
		result2 error
	}
	UpsertDomainStub        func(context.Context, lager.Logger, string, uint32) error
	upsertDomainMutex       sync.RWMutex
	upsertDomainArgsForCall []struct {
		arg1 context.Context
		arg2 lager.Logger
		arg3 string
		arg4 uint32
	}
	upsertDomainReturns struct {
		result1 error
	}
	upsertDomainReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeDomainDB) FreshDomains(arg1 context.Context, arg2 lager.Logger) ([]string, error) {
	fake.freshDomainsMutex.Lock()
	ret, specificReturn := fake.freshDomainsReturnsOnCall[len(fake.freshDomainsArgsForCall)]
	fake.freshDomainsArgsForCall = append(fake.freshDomainsArgsForCall, struct {
		arg1 context.Context
		arg2 lager.Logger
	}{arg1, arg2})
	fake.recordInvocation("FreshDomains", []interface{}{arg1, arg2})
	freshDomainsStubCopy := fake.FreshDomainsStub
	fake.freshDomainsMutex.Unlock()
	if freshDomainsStubCopy != nil {
		return freshDomainsStubCopy(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.freshDomainsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeDomainDB) FreshDomainsCallCount() int {
	fake.freshDomainsMutex.RLock()
	defer fake.freshDomainsMutex.RUnlock()
	return len(fake.freshDomainsArgsForCall)
}

func (fake *FakeDomainDB) FreshDomainsCalls(stub func(context.Context, lager.Logger) ([]string, error)) {
	fake.freshDomainsMutex.Lock()
	defer fake.freshDomainsMutex.Unlock()
	fake.FreshDomainsStub = stub
}

func (fake *FakeDomainDB) FreshDomainsArgsForCall(i int) (context.Context, lager.Logger) {
	fake.freshDomainsMutex.RLock()
	defer fake.freshDomainsMutex.RUnlock()
	argsForCall := fake.freshDomainsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeDomainDB) FreshDomainsReturns(result1 []string, result2 error) {
	fake.freshDomainsMutex.Lock()
	defer fake.freshDomainsMutex.Unlock()
	fake.FreshDomainsStub = nil
	fake.freshDomainsReturns = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *FakeDomainDB) FreshDomainsReturnsOnCall(i int, result1 []string, result2 error) {
	fake.freshDomainsMutex.Lock()
	defer fake.freshDomainsMutex.Unlock()
	fake.FreshDomainsStub = nil
	if fake.freshDomainsReturnsOnCall == nil {
		fake.freshDomainsReturnsOnCall = make(map[int]struct {
			result1 []string
			result2 error
		})
	}
	fake.freshDomainsReturnsOnCall[i] = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *FakeDomainDB) UpsertDomain(arg1 context.Context, arg2 lager.Logger, arg3 string, arg4 uint32) error {
	fake.upsertDomainMutex.Lock()
	ret, specificReturn := fake.upsertDomainReturnsOnCall[len(fake.upsertDomainArgsForCall)]
	fake.upsertDomainArgsForCall = append(fake.upsertDomainArgsForCall, struct {
		arg1 context.Context
		arg2 lager.Logger
		arg3 string
		arg4 uint32
	}{arg1, arg2, arg3, arg4})
	fake.recordInvocation("UpsertDomain", []interface{}{arg1, arg2, arg3, arg4})
	upsertDomainStubCopy := fake.UpsertDomainStub
	fake.upsertDomainMutex.Unlock()
	if upsertDomainStubCopy != nil {
		return upsertDomainStubCopy(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.upsertDomainReturns
	return fakeReturns.result1
}

func (fake *FakeDomainDB) UpsertDomainCallCount() int {
	fake.upsertDomainMutex.RLock()
	defer fake.upsertDomainMutex.RUnlock()
	return len(fake.upsertDomainArgsForCall)
}

func (fake *FakeDomainDB) UpsertDomainCalls(stub func(context.Context, lager.Logger, string, uint32) error) {
	fake.upsertDomainMutex.Lock()
	defer fake.upsertDomainMutex.Unlock()
	fake.UpsertDomainStub = stub
}

func (fake *FakeDomainDB) UpsertDomainArgsForCall(i int) (context.Context, lager.Logger, string, uint32) {
	fake.upsertDomainMutex.RLock()
	defer fake.upsertDomainMutex.RUnlock()
	argsForCall := fake.upsertDomainArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeDomainDB) UpsertDomainReturns(result1 error) {
	fake.upsertDomainMutex.Lock()
	defer fake.upsertDomainMutex.Unlock()
	fake.UpsertDomainStub = nil
	fake.upsertDomainReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeDomainDB) UpsertDomainReturnsOnCall(i int, result1 error) {
	fake.upsertDomainMutex.Lock()
	defer fake.upsertDomainMutex.Unlock()
	fake.UpsertDomainStub = nil
	if fake.upsertDomainReturnsOnCall == nil {
		fake.upsertDomainReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.upsertDomainReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeDomainDB) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.freshDomainsMutex.RLock()
	defer fake.freshDomainsMutex.RUnlock()
	fake.upsertDomainMutex.RLock()
	defer fake.upsertDomainMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeDomainDB) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ db.DomainDB = new(FakeDomainDB)
