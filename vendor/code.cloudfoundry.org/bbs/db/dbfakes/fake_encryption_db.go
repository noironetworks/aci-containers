// Code generated by counterfeiter. DO NOT EDIT.
package dbfakes

import (
	"context"
	"sync"

	"code.cloudfoundry.org/bbs/db"
	"code.cloudfoundry.org/lager"
)

type FakeEncryptionDB struct {
	EncryptionKeyLabelStub        func(context.Context, lager.Logger) (string, error)
	encryptionKeyLabelMutex       sync.RWMutex
	encryptionKeyLabelArgsForCall []struct {
		arg1 context.Context
		arg2 lager.Logger
	}
	encryptionKeyLabelReturns struct {
		result1 string
		result2 error
	}
	encryptionKeyLabelReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	PerformEncryptionStub        func(context.Context, lager.Logger) error
	performEncryptionMutex       sync.RWMutex
	performEncryptionArgsForCall []struct {
		arg1 context.Context
		arg2 lager.Logger
	}
	performEncryptionReturns struct {
		result1 error
	}
	performEncryptionReturnsOnCall map[int]struct {
		result1 error
	}
	SetEncryptionKeyLabelStub        func(context.Context, lager.Logger, string) error
	setEncryptionKeyLabelMutex       sync.RWMutex
	setEncryptionKeyLabelArgsForCall []struct {
		arg1 context.Context
		arg2 lager.Logger
		arg3 string
	}
	setEncryptionKeyLabelReturns struct {
		result1 error
	}
	setEncryptionKeyLabelReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeEncryptionDB) EncryptionKeyLabel(arg1 context.Context, arg2 lager.Logger) (string, error) {
	fake.encryptionKeyLabelMutex.Lock()
	ret, specificReturn := fake.encryptionKeyLabelReturnsOnCall[len(fake.encryptionKeyLabelArgsForCall)]
	fake.encryptionKeyLabelArgsForCall = append(fake.encryptionKeyLabelArgsForCall, struct {
		arg1 context.Context
		arg2 lager.Logger
	}{arg1, arg2})
	fake.recordInvocation("EncryptionKeyLabel", []interface{}{arg1, arg2})
	encryptionKeyLabelStubCopy := fake.EncryptionKeyLabelStub
	fake.encryptionKeyLabelMutex.Unlock()
	if encryptionKeyLabelStubCopy != nil {
		return encryptionKeyLabelStubCopy(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.encryptionKeyLabelReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEncryptionDB) EncryptionKeyLabelCallCount() int {
	fake.encryptionKeyLabelMutex.RLock()
	defer fake.encryptionKeyLabelMutex.RUnlock()
	return len(fake.encryptionKeyLabelArgsForCall)
}

func (fake *FakeEncryptionDB) EncryptionKeyLabelCalls(stub func(context.Context, lager.Logger) (string, error)) {
	fake.encryptionKeyLabelMutex.Lock()
	defer fake.encryptionKeyLabelMutex.Unlock()
	fake.EncryptionKeyLabelStub = stub
}

func (fake *FakeEncryptionDB) EncryptionKeyLabelArgsForCall(i int) (context.Context, lager.Logger) {
	fake.encryptionKeyLabelMutex.RLock()
	defer fake.encryptionKeyLabelMutex.RUnlock()
	argsForCall := fake.encryptionKeyLabelArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeEncryptionDB) EncryptionKeyLabelReturns(result1 string, result2 error) {
	fake.encryptionKeyLabelMutex.Lock()
	defer fake.encryptionKeyLabelMutex.Unlock()
	fake.EncryptionKeyLabelStub = nil
	fake.encryptionKeyLabelReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeEncryptionDB) EncryptionKeyLabelReturnsOnCall(i int, result1 string, result2 error) {
	fake.encryptionKeyLabelMutex.Lock()
	defer fake.encryptionKeyLabelMutex.Unlock()
	fake.EncryptionKeyLabelStub = nil
	if fake.encryptionKeyLabelReturnsOnCall == nil {
		fake.encryptionKeyLabelReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.encryptionKeyLabelReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeEncryptionDB) PerformEncryption(arg1 context.Context, arg2 lager.Logger) error {
	fake.performEncryptionMutex.Lock()
	ret, specificReturn := fake.performEncryptionReturnsOnCall[len(fake.performEncryptionArgsForCall)]
	fake.performEncryptionArgsForCall = append(fake.performEncryptionArgsForCall, struct {
		arg1 context.Context
		arg2 lager.Logger
	}{arg1, arg2})
	fake.recordInvocation("PerformEncryption", []interface{}{arg1, arg2})
	performEncryptionStubCopy := fake.PerformEncryptionStub
	fake.performEncryptionMutex.Unlock()
	if performEncryptionStubCopy != nil {
		return performEncryptionStubCopy(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.performEncryptionReturns
	return fakeReturns.result1
}

func (fake *FakeEncryptionDB) PerformEncryptionCallCount() int {
	fake.performEncryptionMutex.RLock()
	defer fake.performEncryptionMutex.RUnlock()
	return len(fake.performEncryptionArgsForCall)
}

func (fake *FakeEncryptionDB) PerformEncryptionCalls(stub func(context.Context, lager.Logger) error) {
	fake.performEncryptionMutex.Lock()
	defer fake.performEncryptionMutex.Unlock()
	fake.PerformEncryptionStub = stub
}

func (fake *FakeEncryptionDB) PerformEncryptionArgsForCall(i int) (context.Context, lager.Logger) {
	fake.performEncryptionMutex.RLock()
	defer fake.performEncryptionMutex.RUnlock()
	argsForCall := fake.performEncryptionArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeEncryptionDB) PerformEncryptionReturns(result1 error) {
	fake.performEncryptionMutex.Lock()
	defer fake.performEncryptionMutex.Unlock()
	fake.PerformEncryptionStub = nil
	fake.performEncryptionReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeEncryptionDB) PerformEncryptionReturnsOnCall(i int, result1 error) {
	fake.performEncryptionMutex.Lock()
	defer fake.performEncryptionMutex.Unlock()
	fake.PerformEncryptionStub = nil
	if fake.performEncryptionReturnsOnCall == nil {
		fake.performEncryptionReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.performEncryptionReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeEncryptionDB) SetEncryptionKeyLabel(arg1 context.Context, arg2 lager.Logger, arg3 string) error {
	fake.setEncryptionKeyLabelMutex.Lock()
	ret, specificReturn := fake.setEncryptionKeyLabelReturnsOnCall[len(fake.setEncryptionKeyLabelArgsForCall)]
	fake.setEncryptionKeyLabelArgsForCall = append(fake.setEncryptionKeyLabelArgsForCall, struct {
		arg1 context.Context
		arg2 lager.Logger
		arg3 string
	}{arg1, arg2, arg3})
	fake.recordInvocation("SetEncryptionKeyLabel", []interface{}{arg1, arg2, arg3})
	setEncryptionKeyLabelStubCopy := fake.SetEncryptionKeyLabelStub
	fake.setEncryptionKeyLabelMutex.Unlock()
	if setEncryptionKeyLabelStubCopy != nil {
		return setEncryptionKeyLabelStubCopy(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.setEncryptionKeyLabelReturns
	return fakeReturns.result1
}

func (fake *FakeEncryptionDB) SetEncryptionKeyLabelCallCount() int {
	fake.setEncryptionKeyLabelMutex.RLock()
	defer fake.setEncryptionKeyLabelMutex.RUnlock()
	return len(fake.setEncryptionKeyLabelArgsForCall)
}

func (fake *FakeEncryptionDB) SetEncryptionKeyLabelCalls(stub func(context.Context, lager.Logger, string) error) {
	fake.setEncryptionKeyLabelMutex.Lock()
	defer fake.setEncryptionKeyLabelMutex.Unlock()
	fake.SetEncryptionKeyLabelStub = stub
}

func (fake *FakeEncryptionDB) SetEncryptionKeyLabelArgsForCall(i int) (context.Context, lager.Logger, string) {
	fake.setEncryptionKeyLabelMutex.RLock()
	defer fake.setEncryptionKeyLabelMutex.RUnlock()
	argsForCall := fake.setEncryptionKeyLabelArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEncryptionDB) SetEncryptionKeyLabelReturns(result1 error) {
	fake.setEncryptionKeyLabelMutex.Lock()
	defer fake.setEncryptionKeyLabelMutex.Unlock()
	fake.SetEncryptionKeyLabelStub = nil
	fake.setEncryptionKeyLabelReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeEncryptionDB) SetEncryptionKeyLabelReturnsOnCall(i int, result1 error) {
	fake.setEncryptionKeyLabelMutex.Lock()
	defer fake.setEncryptionKeyLabelMutex.Unlock()
	fake.SetEncryptionKeyLabelStub = nil
	if fake.setEncryptionKeyLabelReturnsOnCall == nil {
		fake.setEncryptionKeyLabelReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.setEncryptionKeyLabelReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeEncryptionDB) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.encryptionKeyLabelMutex.RLock()
	defer fake.encryptionKeyLabelMutex.RUnlock()
	fake.performEncryptionMutex.RLock()
	defer fake.performEncryptionMutex.RUnlock()
	fake.setEncryptionKeyLabelMutex.RLock()
	defer fake.setEncryptionKeyLabelMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeEncryptionDB) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ db.EncryptionDB = new(FakeEncryptionDB)
