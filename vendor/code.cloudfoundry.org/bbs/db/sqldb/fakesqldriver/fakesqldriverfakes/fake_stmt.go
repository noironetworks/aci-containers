// Code generated by counterfeiter. DO NOT EDIT.
package fakesqldriverfakes

import (
	"database/sql/driver"
	"sync"

	"code.cloudfoundry.org/bbs/db/sqldb/fakesqldriver"
)

type FakeStmt struct {
	CloseStub        func() error
	closeMutex       sync.RWMutex
	closeArgsForCall []struct {
	}
	closeReturns struct {
		result1 error
	}
	closeReturnsOnCall map[int]struct {
		result1 error
	}
	ExecStub        func([]driver.Value) (driver.Result, error)
	execMutex       sync.RWMutex
	execArgsForCall []struct {
		arg1 []driver.Value
	}
	execReturns struct {
		result1 driver.Result
		result2 error
	}
	execReturnsOnCall map[int]struct {
		result1 driver.Result
		result2 error
	}
	NumInputStub        func() int
	numInputMutex       sync.RWMutex
	numInputArgsForCall []struct {
	}
	numInputReturns struct {
		result1 int
	}
	numInputReturnsOnCall map[int]struct {
		result1 int
	}
	QueryStub        func([]driver.Value) (driver.Rows, error)
	queryMutex       sync.RWMutex
	queryArgsForCall []struct {
		arg1 []driver.Value
	}
	queryReturns struct {
		result1 driver.Rows
		result2 error
	}
	queryReturnsOnCall map[int]struct {
		result1 driver.Rows
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeStmt) Close() error {
	fake.closeMutex.Lock()
	ret, specificReturn := fake.closeReturnsOnCall[len(fake.closeArgsForCall)]
	fake.closeArgsForCall = append(fake.closeArgsForCall, struct {
	}{})
	fake.recordInvocation("Close", []interface{}{})
	closeStubCopy := fake.CloseStub
	fake.closeMutex.Unlock()
	if closeStubCopy != nil {
		return closeStubCopy()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.closeReturns
	return fakeReturns.result1
}

func (fake *FakeStmt) CloseCallCount() int {
	fake.closeMutex.RLock()
	defer fake.closeMutex.RUnlock()
	return len(fake.closeArgsForCall)
}

func (fake *FakeStmt) CloseCalls(stub func() error) {
	fake.closeMutex.Lock()
	defer fake.closeMutex.Unlock()
	fake.CloseStub = stub
}

func (fake *FakeStmt) CloseReturns(result1 error) {
	fake.closeMutex.Lock()
	defer fake.closeMutex.Unlock()
	fake.CloseStub = nil
	fake.closeReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeStmt) CloseReturnsOnCall(i int, result1 error) {
	fake.closeMutex.Lock()
	defer fake.closeMutex.Unlock()
	fake.CloseStub = nil
	if fake.closeReturnsOnCall == nil {
		fake.closeReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.closeReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeStmt) Exec(arg1 []driver.Value) (driver.Result, error) {
	var arg1Copy []driver.Value
	if arg1 != nil {
		arg1Copy = make([]driver.Value, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.execMutex.Lock()
	ret, specificReturn := fake.execReturnsOnCall[len(fake.execArgsForCall)]
	fake.execArgsForCall = append(fake.execArgsForCall, struct {
		arg1 []driver.Value
	}{arg1Copy})
	fake.recordInvocation("Exec", []interface{}{arg1Copy})
	execStubCopy := fake.ExecStub
	fake.execMutex.Unlock()
	if execStubCopy != nil {
		return execStubCopy(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.execReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeStmt) ExecCallCount() int {
	fake.execMutex.RLock()
	defer fake.execMutex.RUnlock()
	return len(fake.execArgsForCall)
}

func (fake *FakeStmt) ExecCalls(stub func([]driver.Value) (driver.Result, error)) {
	fake.execMutex.Lock()
	defer fake.execMutex.Unlock()
	fake.ExecStub = stub
}

func (fake *FakeStmt) ExecArgsForCall(i int) []driver.Value {
	fake.execMutex.RLock()
	defer fake.execMutex.RUnlock()
	argsForCall := fake.execArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeStmt) ExecReturns(result1 driver.Result, result2 error) {
	fake.execMutex.Lock()
	defer fake.execMutex.Unlock()
	fake.ExecStub = nil
	fake.execReturns = struct {
		result1 driver.Result
		result2 error
	}{result1, result2}
}

func (fake *FakeStmt) ExecReturnsOnCall(i int, result1 driver.Result, result2 error) {
	fake.execMutex.Lock()
	defer fake.execMutex.Unlock()
	fake.ExecStub = nil
	if fake.execReturnsOnCall == nil {
		fake.execReturnsOnCall = make(map[int]struct {
			result1 driver.Result
			result2 error
		})
	}
	fake.execReturnsOnCall[i] = struct {
		result1 driver.Result
		result2 error
	}{result1, result2}
}

func (fake *FakeStmt) NumInput() int {
	fake.numInputMutex.Lock()
	ret, specificReturn := fake.numInputReturnsOnCall[len(fake.numInputArgsForCall)]
	fake.numInputArgsForCall = append(fake.numInputArgsForCall, struct {
	}{})
	fake.recordInvocation("NumInput", []interface{}{})
	numInputStubCopy := fake.NumInputStub
	fake.numInputMutex.Unlock()
	if numInputStubCopy != nil {
		return numInputStubCopy()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.numInputReturns
	return fakeReturns.result1
}

func (fake *FakeStmt) NumInputCallCount() int {
	fake.numInputMutex.RLock()
	defer fake.numInputMutex.RUnlock()
	return len(fake.numInputArgsForCall)
}

func (fake *FakeStmt) NumInputCalls(stub func() int) {
	fake.numInputMutex.Lock()
	defer fake.numInputMutex.Unlock()
	fake.NumInputStub = stub
}

func (fake *FakeStmt) NumInputReturns(result1 int) {
	fake.numInputMutex.Lock()
	defer fake.numInputMutex.Unlock()
	fake.NumInputStub = nil
	fake.numInputReturns = struct {
		result1 int
	}{result1}
}

func (fake *FakeStmt) NumInputReturnsOnCall(i int, result1 int) {
	fake.numInputMutex.Lock()
	defer fake.numInputMutex.Unlock()
	fake.NumInputStub = nil
	if fake.numInputReturnsOnCall == nil {
		fake.numInputReturnsOnCall = make(map[int]struct {
			result1 int
		})
	}
	fake.numInputReturnsOnCall[i] = struct {
		result1 int
	}{result1}
}

func (fake *FakeStmt) Query(arg1 []driver.Value) (driver.Rows, error) {
	var arg1Copy []driver.Value
	if arg1 != nil {
		arg1Copy = make([]driver.Value, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.queryMutex.Lock()
	ret, specificReturn := fake.queryReturnsOnCall[len(fake.queryArgsForCall)]
	fake.queryArgsForCall = append(fake.queryArgsForCall, struct {
		arg1 []driver.Value
	}{arg1Copy})
	fake.recordInvocation("Query", []interface{}{arg1Copy})
	queryStubCopy := fake.QueryStub
	fake.queryMutex.Unlock()
	if queryStubCopy != nil {
		return queryStubCopy(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.queryReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeStmt) QueryCallCount() int {
	fake.queryMutex.RLock()
	defer fake.queryMutex.RUnlock()
	return len(fake.queryArgsForCall)
}

func (fake *FakeStmt) QueryCalls(stub func([]driver.Value) (driver.Rows, error)) {
	fake.queryMutex.Lock()
	defer fake.queryMutex.Unlock()
	fake.QueryStub = stub
}

func (fake *FakeStmt) QueryArgsForCall(i int) []driver.Value {
	fake.queryMutex.RLock()
	defer fake.queryMutex.RUnlock()
	argsForCall := fake.queryArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeStmt) QueryReturns(result1 driver.Rows, result2 error) {
	fake.queryMutex.Lock()
	defer fake.queryMutex.Unlock()
	fake.QueryStub = nil
	fake.queryReturns = struct {
		result1 driver.Rows
		result2 error
	}{result1, result2}
}

func (fake *FakeStmt) QueryReturnsOnCall(i int, result1 driver.Rows, result2 error) {
	fake.queryMutex.Lock()
	defer fake.queryMutex.Unlock()
	fake.QueryStub = nil
	if fake.queryReturnsOnCall == nil {
		fake.queryReturnsOnCall = make(map[int]struct {
			result1 driver.Rows
			result2 error
		})
	}
	fake.queryReturnsOnCall[i] = struct {
		result1 driver.Rows
		result2 error
	}{result1, result2}
}

func (fake *FakeStmt) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.closeMutex.RLock()
	defer fake.closeMutex.RUnlock()
	fake.execMutex.RLock()
	defer fake.execMutex.RUnlock()
	fake.numInputMutex.RLock()
	defer fake.numInputMutex.RUnlock()
	fake.queryMutex.RLock()
	defer fake.queryMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeStmt) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ fakesqldriver.Stmt = new(FakeStmt)
