// Code generated by counterfeiter. DO NOT EDIT.
package fake_controllers

import (
	"context"
	"sync"

	"code.cloudfoundry.org/bbs/converger"
	"code.cloudfoundry.org/lager"
)

type FakeLrpConvergenceController struct {
	ConvergeLRPsStub        func(context.Context, lager.Logger)
	convergeLRPsMutex       sync.RWMutex
	convergeLRPsArgsForCall []struct {
		arg1 context.Context
		arg2 lager.Logger
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeLrpConvergenceController) ConvergeLRPs(arg1 context.Context, arg2 lager.Logger) {
	fake.convergeLRPsMutex.Lock()
	fake.convergeLRPsArgsForCall = append(fake.convergeLRPsArgsForCall, struct {
		arg1 context.Context
		arg2 lager.Logger
	}{arg1, arg2})
	fake.recordInvocation("ConvergeLRPs", []interface{}{arg1, arg2})
	convergeLRPsStubCopy := fake.ConvergeLRPsStub
	fake.convergeLRPsMutex.Unlock()
	if convergeLRPsStubCopy != nil {
		convergeLRPsStubCopy(arg1, arg2)
	}
}

func (fake *FakeLrpConvergenceController) ConvergeLRPsCallCount() int {
	fake.convergeLRPsMutex.RLock()
	defer fake.convergeLRPsMutex.RUnlock()
	return len(fake.convergeLRPsArgsForCall)
}

func (fake *FakeLrpConvergenceController) ConvergeLRPsCalls(stub func(context.Context, lager.Logger)) {
	fake.convergeLRPsMutex.Lock()
	defer fake.convergeLRPsMutex.Unlock()
	fake.ConvergeLRPsStub = stub
}

func (fake *FakeLrpConvergenceController) ConvergeLRPsArgsForCall(i int) (context.Context, lager.Logger) {
	fake.convergeLRPsMutex.RLock()
	defer fake.convergeLRPsMutex.RUnlock()
	argsForCall := fake.convergeLRPsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeLrpConvergenceController) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.convergeLRPsMutex.RLock()
	defer fake.convergeLRPsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeLrpConvergenceController) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ converger.LrpConvergenceController = new(FakeLrpConvergenceController)
