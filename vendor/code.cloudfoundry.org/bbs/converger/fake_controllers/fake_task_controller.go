// Code generated by counterfeiter. DO NOT EDIT.
package fake_controllers

import (
	"context"
	"sync"
	"time"

	"code.cloudfoundry.org/bbs/converger"
	"code.cloudfoundry.org/lager"
)

type FakeTaskController struct {
	ConvergeTasksStub        func(context.Context, lager.Logger, time.Duration, time.Duration, time.Duration) error
	convergeTasksMutex       sync.RWMutex
	convergeTasksArgsForCall []struct {
		arg1 context.Context
		arg2 lager.Logger
		arg3 time.Duration
		arg4 time.Duration
		arg5 time.Duration
	}
	convergeTasksReturns struct {
		result1 error
	}
	convergeTasksReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeTaskController) ConvergeTasks(arg1 context.Context, arg2 lager.Logger, arg3 time.Duration, arg4 time.Duration, arg5 time.Duration) error {
	fake.convergeTasksMutex.Lock()
	ret, specificReturn := fake.convergeTasksReturnsOnCall[len(fake.convergeTasksArgsForCall)]
	fake.convergeTasksArgsForCall = append(fake.convergeTasksArgsForCall, struct {
		arg1 context.Context
		arg2 lager.Logger
		arg3 time.Duration
		arg4 time.Duration
		arg5 time.Duration
	}{arg1, arg2, arg3, arg4, arg5})
	fake.recordInvocation("ConvergeTasks", []interface{}{arg1, arg2, arg3, arg4, arg5})
	convergeTasksStubCopy := fake.ConvergeTasksStub
	fake.convergeTasksMutex.Unlock()
	if convergeTasksStubCopy != nil {
		return convergeTasksStubCopy(arg1, arg2, arg3, arg4, arg5)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.convergeTasksReturns
	return fakeReturns.result1
}

func (fake *FakeTaskController) ConvergeTasksCallCount() int {
	fake.convergeTasksMutex.RLock()
	defer fake.convergeTasksMutex.RUnlock()
	return len(fake.convergeTasksArgsForCall)
}

func (fake *FakeTaskController) ConvergeTasksCalls(stub func(context.Context, lager.Logger, time.Duration, time.Duration, time.Duration) error) {
	fake.convergeTasksMutex.Lock()
	defer fake.convergeTasksMutex.Unlock()
	fake.ConvergeTasksStub = stub
}

func (fake *FakeTaskController) ConvergeTasksArgsForCall(i int) (context.Context, lager.Logger, time.Duration, time.Duration, time.Duration) {
	fake.convergeTasksMutex.RLock()
	defer fake.convergeTasksMutex.RUnlock()
	argsForCall := fake.convergeTasksArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4, argsForCall.arg5
}

func (fake *FakeTaskController) ConvergeTasksReturns(result1 error) {
	fake.convergeTasksMutex.Lock()
	defer fake.convergeTasksMutex.Unlock()
	fake.ConvergeTasksStub = nil
	fake.convergeTasksReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeTaskController) ConvergeTasksReturnsOnCall(i int, result1 error) {
	fake.convergeTasksMutex.Lock()
	defer fake.convergeTasksMutex.Unlock()
	fake.ConvergeTasksStub = nil
	if fake.convergeTasksReturnsOnCall == nil {
		fake.convergeTasksReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.convergeTasksReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeTaskController) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.convergeTasksMutex.RLock()
	defer fake.convergeTasksMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeTaskController) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ converger.TaskController = new(FakeTaskController)
