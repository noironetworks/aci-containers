// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: actual_lrp.proto

package models

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import strconv "strconv"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type ActualLRPNetInfo_PreferredAddress int32

const (
	ActualLRPNetInfo_PreferredAddressUnknown  ActualLRPNetInfo_PreferredAddress = 0
	ActualLRPNetInfo_PreferredAddressInstance ActualLRPNetInfo_PreferredAddress = 1
	ActualLRPNetInfo_PreferredAddressHost     ActualLRPNetInfo_PreferredAddress = 2
)

var ActualLRPNetInfo_PreferredAddress_name = map[int32]string{
	0: "UNKNOWN",
	1: "INSTANCE",
	2: "HOST",
}
var ActualLRPNetInfo_PreferredAddress_value = map[string]int32{
	"UNKNOWN":  0,
	"INSTANCE": 1,
	"HOST":     2,
}

func (ActualLRPNetInfo_PreferredAddress) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_actual_lrp_10bbc9293257e61f, []int{4, 0}
}

type ActualLRP_Presence int32

const (
	ActualLRP_Ordinary   ActualLRP_Presence = 0
	ActualLRP_Evacuating ActualLRP_Presence = 1
	ActualLRP_Suspect    ActualLRP_Presence = 2
)

var ActualLRP_Presence_name = map[int32]string{
	0: "ORDINARY",
	1: "EVACUATING",
	2: "SUSPECT",
}
var ActualLRP_Presence_value = map[string]int32{
	"ORDINARY":   0,
	"EVACUATING": 1,
	"SUSPECT":    2,
}

func (ActualLRP_Presence) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_actual_lrp_10bbc9293257e61f, []int{5, 0}
}

// Deprecated: Do not use.
type ActualLRPGroup struct {
	Instance   *ActualLRP `protobuf:"bytes,1,opt,name=instance,proto3" json:"instance,omitempty"`
	Evacuating *ActualLRP `protobuf:"bytes,2,opt,name=evacuating,proto3" json:"evacuating,omitempty"`
}

func (m *ActualLRPGroup) Reset()      { *m = ActualLRPGroup{} }
func (*ActualLRPGroup) ProtoMessage() {}
func (*ActualLRPGroup) Descriptor() ([]byte, []int) {
	return fileDescriptor_actual_lrp_10bbc9293257e61f, []int{0}
}
func (m *ActualLRPGroup) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActualLRPGroup) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActualLRPGroup.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ActualLRPGroup) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActualLRPGroup.Merge(dst, src)
}
func (m *ActualLRPGroup) XXX_Size() int {
	return m.Size()
}
func (m *ActualLRPGroup) XXX_DiscardUnknown() {
	xxx_messageInfo_ActualLRPGroup.DiscardUnknown(m)
}

var xxx_messageInfo_ActualLRPGroup proto.InternalMessageInfo

func (m *ActualLRPGroup) GetInstance() *ActualLRP {
	if m != nil {
		return m.Instance
	}
	return nil
}

func (m *ActualLRPGroup) GetEvacuating() *ActualLRP {
	if m != nil {
		return m.Evacuating
	}
	return nil
}

type PortMapping struct {
	ContainerPort         uint32 `protobuf:"varint,1,opt,name=container_port,json=containerPort,proto3" json:"container_port"`
	HostPort              uint32 `protobuf:"varint,2,opt,name=host_port,json=hostPort,proto3" json:"host_port"`
	ContainerTlsProxyPort uint32 `protobuf:"varint,3,opt,name=container_tls_proxy_port,json=containerTlsProxyPort,proto3" json:"container_tls_proxy_port,omitempty"`
	HostTlsProxyPort      uint32 `protobuf:"varint,4,opt,name=host_tls_proxy_port,json=hostTlsProxyPort,proto3" json:"host_tls_proxy_port,omitempty"`
}

func (m *PortMapping) Reset()      { *m = PortMapping{} }
func (*PortMapping) ProtoMessage() {}
func (*PortMapping) Descriptor() ([]byte, []int) {
	return fileDescriptor_actual_lrp_10bbc9293257e61f, []int{1}
}
func (m *PortMapping) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PortMapping) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PortMapping.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *PortMapping) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PortMapping.Merge(dst, src)
}
func (m *PortMapping) XXX_Size() int {
	return m.Size()
}
func (m *PortMapping) XXX_DiscardUnknown() {
	xxx_messageInfo_PortMapping.DiscardUnknown(m)
}

var xxx_messageInfo_PortMapping proto.InternalMessageInfo

func (m *PortMapping) GetContainerPort() uint32 {
	if m != nil {
		return m.ContainerPort
	}
	return 0
}

func (m *PortMapping) GetHostPort() uint32 {
	if m != nil {
		return m.HostPort
	}
	return 0
}

func (m *PortMapping) GetContainerTlsProxyPort() uint32 {
	if m != nil {
		return m.ContainerTlsProxyPort
	}
	return 0
}

func (m *PortMapping) GetHostTlsProxyPort() uint32 {
	if m != nil {
		return m.HostTlsProxyPort
	}
	return 0
}

type ActualLRPKey struct {
	ProcessGuid string `protobuf:"bytes,1,opt,name=process_guid,json=processGuid,proto3" json:"process_guid"`
	Index       int32  `protobuf:"varint,2,opt,name=index,proto3" json:"index"`
	Domain      string `protobuf:"bytes,3,opt,name=domain,proto3" json:"domain"`
}

func (m *ActualLRPKey) Reset()      { *m = ActualLRPKey{} }
func (*ActualLRPKey) ProtoMessage() {}
func (*ActualLRPKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_actual_lrp_10bbc9293257e61f, []int{2}
}
func (m *ActualLRPKey) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActualLRPKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActualLRPKey.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ActualLRPKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActualLRPKey.Merge(dst, src)
}
func (m *ActualLRPKey) XXX_Size() int {
	return m.Size()
}
func (m *ActualLRPKey) XXX_DiscardUnknown() {
	xxx_messageInfo_ActualLRPKey.DiscardUnknown(m)
}

var xxx_messageInfo_ActualLRPKey proto.InternalMessageInfo

func (m *ActualLRPKey) GetProcessGuid() string {
	if m != nil {
		return m.ProcessGuid
	}
	return ""
}

func (m *ActualLRPKey) GetIndex() int32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *ActualLRPKey) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

type ActualLRPInstanceKey struct {
	InstanceGuid string `protobuf:"bytes,1,opt,name=instance_guid,json=instanceGuid,proto3" json:"instance_guid"`
	CellId       string `protobuf:"bytes,2,opt,name=cell_id,json=cellId,proto3" json:"cell_id"`
}

func (m *ActualLRPInstanceKey) Reset()      { *m = ActualLRPInstanceKey{} }
func (*ActualLRPInstanceKey) ProtoMessage() {}
func (*ActualLRPInstanceKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_actual_lrp_10bbc9293257e61f, []int{3}
}
func (m *ActualLRPInstanceKey) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActualLRPInstanceKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActualLRPInstanceKey.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ActualLRPInstanceKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActualLRPInstanceKey.Merge(dst, src)
}
func (m *ActualLRPInstanceKey) XXX_Size() int {
	return m.Size()
}
func (m *ActualLRPInstanceKey) XXX_DiscardUnknown() {
	xxx_messageInfo_ActualLRPInstanceKey.DiscardUnknown(m)
}

var xxx_messageInfo_ActualLRPInstanceKey proto.InternalMessageInfo

func (m *ActualLRPInstanceKey) GetInstanceGuid() string {
	if m != nil {
		return m.InstanceGuid
	}
	return ""
}

func (m *ActualLRPInstanceKey) GetCellId() string {
	if m != nil {
		return m.CellId
	}
	return ""
}

type ActualLRPNetInfo struct {
	Address          string                            `protobuf:"bytes,1,opt,name=address,proto3" json:"address"`
	Ports            []*PortMapping                    `protobuf:"bytes,2,rep,name=ports,proto3" json:"ports"`
	InstanceAddress  string                            `protobuf:"bytes,3,opt,name=instance_address,json=instanceAddress,proto3" json:"instance_address,omitempty"`
	PreferredAddress ActualLRPNetInfo_PreferredAddress `protobuf:"varint,4,opt,name=preferred_address,json=preferredAddress,proto3,enum=models.ActualLRPNetInfo_PreferredAddress" json:"preferred_address"`
}

func (m *ActualLRPNetInfo) Reset()      { *m = ActualLRPNetInfo{} }
func (*ActualLRPNetInfo) ProtoMessage() {}
func (*ActualLRPNetInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_actual_lrp_10bbc9293257e61f, []int{4}
}
func (m *ActualLRPNetInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActualLRPNetInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActualLRPNetInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ActualLRPNetInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActualLRPNetInfo.Merge(dst, src)
}
func (m *ActualLRPNetInfo) XXX_Size() int {
	return m.Size()
}
func (m *ActualLRPNetInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ActualLRPNetInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ActualLRPNetInfo proto.InternalMessageInfo

func (m *ActualLRPNetInfo) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *ActualLRPNetInfo) GetPorts() []*PortMapping {
	if m != nil {
		return m.Ports
	}
	return nil
}

func (m *ActualLRPNetInfo) GetInstanceAddress() string {
	if m != nil {
		return m.InstanceAddress
	}
	return ""
}

func (m *ActualLRPNetInfo) GetPreferredAddress() ActualLRPNetInfo_PreferredAddress {
	if m != nil {
		return m.PreferredAddress
	}
	return ActualLRPNetInfo_PreferredAddressUnknown
}

type ActualLRP struct {
	ActualLRPKey         `protobuf:"bytes,1,opt,name=actual_lrp_key,json=actualLrpKey,proto3,embedded=actual_lrp_key" json:""`
	ActualLRPInstanceKey `protobuf:"bytes,2,opt,name=actual_lrp_instance_key,json=actualLrpInstanceKey,proto3,embedded=actual_lrp_instance_key" json:""`
	ActualLRPNetInfo     `protobuf:"bytes,3,opt,name=actual_lrp_net_info,json=actualLrpNetInfo,proto3,embedded=actual_lrp_net_info" json:""`
	CrashCount           int32              `protobuf:"varint,4,opt,name=crash_count,json=crashCount,proto3" json:"crash_count"`
	CrashReason          string             `protobuf:"bytes,5,opt,name=crash_reason,json=crashReason,proto3" json:"crash_reason,omitempty"`
	State                string             `protobuf:"bytes,6,opt,name=state,proto3" json:"state"`
	PlacementError       string             `protobuf:"bytes,7,opt,name=placement_error,json=placementError,proto3" json:"placement_error,omitempty"`
	Since                int64              `protobuf:"varint,8,opt,name=since,proto3" json:"since"`
	ModificationTag      ModificationTag    `protobuf:"bytes,9,opt,name=modification_tag,json=modificationTag,proto3" json:"modification_tag"`
	Presence             ActualLRP_Presence `protobuf:"varint,10,opt,name=presence,proto3,enum=models.ActualLRP_Presence" json:"presence"`
}

func (m *ActualLRP) Reset()      { *m = ActualLRP{} }
func (*ActualLRP) ProtoMessage() {}
func (*ActualLRP) Descriptor() ([]byte, []int) {
	return fileDescriptor_actual_lrp_10bbc9293257e61f, []int{5}
}
func (m *ActualLRP) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActualLRP) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActualLRP.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ActualLRP) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActualLRP.Merge(dst, src)
}
func (m *ActualLRP) XXX_Size() int {
	return m.Size()
}
func (m *ActualLRP) XXX_DiscardUnknown() {
	xxx_messageInfo_ActualLRP.DiscardUnknown(m)
}

var xxx_messageInfo_ActualLRP proto.InternalMessageInfo

func (m *ActualLRP) GetCrashCount() int32 {
	if m != nil {
		return m.CrashCount
	}
	return 0
}

func (m *ActualLRP) GetCrashReason() string {
	if m != nil {
		return m.CrashReason
	}
	return ""
}

func (m *ActualLRP) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *ActualLRP) GetPlacementError() string {
	if m != nil {
		return m.PlacementError
	}
	return ""
}

func (m *ActualLRP) GetSince() int64 {
	if m != nil {
		return m.Since
	}
	return 0
}

func (m *ActualLRP) GetModificationTag() ModificationTag {
	if m != nil {
		return m.ModificationTag
	}
	return ModificationTag{}
}

func (m *ActualLRP) GetPresence() ActualLRP_Presence {
	if m != nil {
		return m.Presence
	}
	return ActualLRP_Ordinary
}

func init() {
	proto.RegisterType((*ActualLRPGroup)(nil), "models.ActualLRPGroup")
	proto.RegisterType((*PortMapping)(nil), "models.PortMapping")
	proto.RegisterType((*ActualLRPKey)(nil), "models.ActualLRPKey")
	proto.RegisterType((*ActualLRPInstanceKey)(nil), "models.ActualLRPInstanceKey")
	proto.RegisterType((*ActualLRPNetInfo)(nil), "models.ActualLRPNetInfo")
	proto.RegisterType((*ActualLRP)(nil), "models.ActualLRP")
	proto.RegisterEnum("models.ActualLRPNetInfo_PreferredAddress", ActualLRPNetInfo_PreferredAddress_name, ActualLRPNetInfo_PreferredAddress_value)
	proto.RegisterEnum("models.ActualLRP_Presence", ActualLRP_Presence_name, ActualLRP_Presence_value)
}
func (x ActualLRPNetInfo_PreferredAddress) String() string {
	s, ok := ActualLRPNetInfo_PreferredAddress_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x ActualLRP_Presence) String() string {
	s, ok := ActualLRP_Presence_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *ActualLRPGroup) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ActualLRPGroup)
	if !ok {
		that2, ok := that.(ActualLRPGroup)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Instance.Equal(that1.Instance) {
		return false
	}
	if !this.Evacuating.Equal(that1.Evacuating) {
		return false
	}
	return true
}
func (this *PortMapping) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PortMapping)
	if !ok {
		that2, ok := that.(PortMapping)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ContainerPort != that1.ContainerPort {
		return false
	}
	if this.HostPort != that1.HostPort {
		return false
	}
	if this.ContainerTlsProxyPort != that1.ContainerTlsProxyPort {
		return false
	}
	if this.HostTlsProxyPort != that1.HostTlsProxyPort {
		return false
	}
	return true
}
func (this *ActualLRPKey) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ActualLRPKey)
	if !ok {
		that2, ok := that.(ActualLRPKey)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ProcessGuid != that1.ProcessGuid {
		return false
	}
	if this.Index != that1.Index {
		return false
	}
	if this.Domain != that1.Domain {
		return false
	}
	return true
}
func (this *ActualLRPInstanceKey) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ActualLRPInstanceKey)
	if !ok {
		that2, ok := that.(ActualLRPInstanceKey)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.InstanceGuid != that1.InstanceGuid {
		return false
	}
	if this.CellId != that1.CellId {
		return false
	}
	return true
}
func (this *ActualLRPNetInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ActualLRPNetInfo)
	if !ok {
		that2, ok := that.(ActualLRPNetInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Address != that1.Address {
		return false
	}
	if len(this.Ports) != len(that1.Ports) {
		return false
	}
	for i := range this.Ports {
		if !this.Ports[i].Equal(that1.Ports[i]) {
			return false
		}
	}
	if this.InstanceAddress != that1.InstanceAddress {
		return false
	}
	if this.PreferredAddress != that1.PreferredAddress {
		return false
	}
	return true
}
func (this *ActualLRP) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ActualLRP)
	if !ok {
		that2, ok := that.(ActualLRP)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ActualLRPKey.Equal(&that1.ActualLRPKey) {
		return false
	}
	if !this.ActualLRPInstanceKey.Equal(&that1.ActualLRPInstanceKey) {
		return false
	}
	if !this.ActualLRPNetInfo.Equal(&that1.ActualLRPNetInfo) {
		return false
	}
	if this.CrashCount != that1.CrashCount {
		return false
	}
	if this.CrashReason != that1.CrashReason {
		return false
	}
	if this.State != that1.State {
		return false
	}
	if this.PlacementError != that1.PlacementError {
		return false
	}
	if this.Since != that1.Since {
		return false
	}
	if !this.ModificationTag.Equal(&that1.ModificationTag) {
		return false
	}
	if this.Presence != that1.Presence {
		return false
	}
	return true
}
func (this *ActualLRPGroup) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&models.ActualLRPGroup{")
	if this.Instance != nil {
		s = append(s, "Instance: "+fmt.Sprintf("%#v", this.Instance)+",\n")
	}
	if this.Evacuating != nil {
		s = append(s, "Evacuating: "+fmt.Sprintf("%#v", this.Evacuating)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PortMapping) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&models.PortMapping{")
	s = append(s, "ContainerPort: "+fmt.Sprintf("%#v", this.ContainerPort)+",\n")
	s = append(s, "HostPort: "+fmt.Sprintf("%#v", this.HostPort)+",\n")
	s = append(s, "ContainerTlsProxyPort: "+fmt.Sprintf("%#v", this.ContainerTlsProxyPort)+",\n")
	s = append(s, "HostTlsProxyPort: "+fmt.Sprintf("%#v", this.HostTlsProxyPort)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ActualLRPKey) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&models.ActualLRPKey{")
	s = append(s, "ProcessGuid: "+fmt.Sprintf("%#v", this.ProcessGuid)+",\n")
	s = append(s, "Index: "+fmt.Sprintf("%#v", this.Index)+",\n")
	s = append(s, "Domain: "+fmt.Sprintf("%#v", this.Domain)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ActualLRPInstanceKey) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&models.ActualLRPInstanceKey{")
	s = append(s, "InstanceGuid: "+fmt.Sprintf("%#v", this.InstanceGuid)+",\n")
	s = append(s, "CellId: "+fmt.Sprintf("%#v", this.CellId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ActualLRPNetInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&models.ActualLRPNetInfo{")
	s = append(s, "Address: "+fmt.Sprintf("%#v", this.Address)+",\n")
	if this.Ports != nil {
		s = append(s, "Ports: "+fmt.Sprintf("%#v", this.Ports)+",\n")
	}
	s = append(s, "InstanceAddress: "+fmt.Sprintf("%#v", this.InstanceAddress)+",\n")
	s = append(s, "PreferredAddress: "+fmt.Sprintf("%#v", this.PreferredAddress)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ActualLRP) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 14)
	s = append(s, "&models.ActualLRP{")
	s = append(s, "ActualLRPKey: "+strings.Replace(this.ActualLRPKey.GoString(), `&`, ``, 1)+",\n")
	s = append(s, "ActualLRPInstanceKey: "+strings.Replace(this.ActualLRPInstanceKey.GoString(), `&`, ``, 1)+",\n")
	s = append(s, "ActualLRPNetInfo: "+strings.Replace(this.ActualLRPNetInfo.GoString(), `&`, ``, 1)+",\n")
	s = append(s, "CrashCount: "+fmt.Sprintf("%#v", this.CrashCount)+",\n")
	s = append(s, "CrashReason: "+fmt.Sprintf("%#v", this.CrashReason)+",\n")
	s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	s = append(s, "PlacementError: "+fmt.Sprintf("%#v", this.PlacementError)+",\n")
	s = append(s, "Since: "+fmt.Sprintf("%#v", this.Since)+",\n")
	s = append(s, "ModificationTag: "+strings.Replace(this.ModificationTag.GoString(), `&`, ``, 1)+",\n")
	s = append(s, "Presence: "+fmt.Sprintf("%#v", this.Presence)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringActualLrp(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *ActualLRPGroup) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActualLRPGroup) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Instance != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintActualLrp(dAtA, i, uint64(m.Instance.Size()))
		n1, err := m.Instance.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Evacuating != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintActualLrp(dAtA, i, uint64(m.Evacuating.Size()))
		n2, err := m.Evacuating.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *PortMapping) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PortMapping) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ContainerPort != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintActualLrp(dAtA, i, uint64(m.ContainerPort))
	}
	if m.HostPort != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintActualLrp(dAtA, i, uint64(m.HostPort))
	}
	if m.ContainerTlsProxyPort != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintActualLrp(dAtA, i, uint64(m.ContainerTlsProxyPort))
	}
	if m.HostTlsProxyPort != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintActualLrp(dAtA, i, uint64(m.HostTlsProxyPort))
	}
	return i, nil
}

func (m *ActualLRPKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActualLRPKey) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ProcessGuid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintActualLrp(dAtA, i, uint64(len(m.ProcessGuid)))
		i += copy(dAtA[i:], m.ProcessGuid)
	}
	if m.Index != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintActualLrp(dAtA, i, uint64(m.Index))
	}
	if len(m.Domain) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintActualLrp(dAtA, i, uint64(len(m.Domain)))
		i += copy(dAtA[i:], m.Domain)
	}
	return i, nil
}

func (m *ActualLRPInstanceKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActualLRPInstanceKey) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.InstanceGuid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintActualLrp(dAtA, i, uint64(len(m.InstanceGuid)))
		i += copy(dAtA[i:], m.InstanceGuid)
	}
	if len(m.CellId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintActualLrp(dAtA, i, uint64(len(m.CellId)))
		i += copy(dAtA[i:], m.CellId)
	}
	return i, nil
}

func (m *ActualLRPNetInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActualLRPNetInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintActualLrp(dAtA, i, uint64(len(m.Address)))
		i += copy(dAtA[i:], m.Address)
	}
	if len(m.Ports) > 0 {
		for _, msg := range m.Ports {
			dAtA[i] = 0x12
			i++
			i = encodeVarintActualLrp(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.InstanceAddress) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintActualLrp(dAtA, i, uint64(len(m.InstanceAddress)))
		i += copy(dAtA[i:], m.InstanceAddress)
	}
	if m.PreferredAddress != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintActualLrp(dAtA, i, uint64(m.PreferredAddress))
	}
	return i, nil
}

func (m *ActualLRP) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActualLRP) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintActualLrp(dAtA, i, uint64(m.ActualLRPKey.Size()))
	n3, err := m.ActualLRPKey.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	dAtA[i] = 0x12
	i++
	i = encodeVarintActualLrp(dAtA, i, uint64(m.ActualLRPInstanceKey.Size()))
	n4, err := m.ActualLRPInstanceKey.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n4
	dAtA[i] = 0x1a
	i++
	i = encodeVarintActualLrp(dAtA, i, uint64(m.ActualLRPNetInfo.Size()))
	n5, err := m.ActualLRPNetInfo.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n5
	if m.CrashCount != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintActualLrp(dAtA, i, uint64(m.CrashCount))
	}
	if len(m.CrashReason) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintActualLrp(dAtA, i, uint64(len(m.CrashReason)))
		i += copy(dAtA[i:], m.CrashReason)
	}
	if len(m.State) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintActualLrp(dAtA, i, uint64(len(m.State)))
		i += copy(dAtA[i:], m.State)
	}
	if len(m.PlacementError) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintActualLrp(dAtA, i, uint64(len(m.PlacementError)))
		i += copy(dAtA[i:], m.PlacementError)
	}
	if m.Since != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintActualLrp(dAtA, i, uint64(m.Since))
	}
	dAtA[i] = 0x4a
	i++
	i = encodeVarintActualLrp(dAtA, i, uint64(m.ModificationTag.Size()))
	n6, err := m.ModificationTag.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n6
	if m.Presence != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintActualLrp(dAtA, i, uint64(m.Presence))
	}
	return i, nil
}

func encodeVarintActualLrp(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ActualLRPGroup) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Instance != nil {
		l = m.Instance.Size()
		n += 1 + l + sovActualLrp(uint64(l))
	}
	if m.Evacuating != nil {
		l = m.Evacuating.Size()
		n += 1 + l + sovActualLrp(uint64(l))
	}
	return n
}

func (m *PortMapping) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ContainerPort != 0 {
		n += 1 + sovActualLrp(uint64(m.ContainerPort))
	}
	if m.HostPort != 0 {
		n += 1 + sovActualLrp(uint64(m.HostPort))
	}
	if m.ContainerTlsProxyPort != 0 {
		n += 1 + sovActualLrp(uint64(m.ContainerTlsProxyPort))
	}
	if m.HostTlsProxyPort != 0 {
		n += 1 + sovActualLrp(uint64(m.HostTlsProxyPort))
	}
	return n
}

func (m *ActualLRPKey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ProcessGuid)
	if l > 0 {
		n += 1 + l + sovActualLrp(uint64(l))
	}
	if m.Index != 0 {
		n += 1 + sovActualLrp(uint64(m.Index))
	}
	l = len(m.Domain)
	if l > 0 {
		n += 1 + l + sovActualLrp(uint64(l))
	}
	return n
}

func (m *ActualLRPInstanceKey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.InstanceGuid)
	if l > 0 {
		n += 1 + l + sovActualLrp(uint64(l))
	}
	l = len(m.CellId)
	if l > 0 {
		n += 1 + l + sovActualLrp(uint64(l))
	}
	return n
}

func (m *ActualLRPNetInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovActualLrp(uint64(l))
	}
	if len(m.Ports) > 0 {
		for _, e := range m.Ports {
			l = e.Size()
			n += 1 + l + sovActualLrp(uint64(l))
		}
	}
	l = len(m.InstanceAddress)
	if l > 0 {
		n += 1 + l + sovActualLrp(uint64(l))
	}
	if m.PreferredAddress != 0 {
		n += 1 + sovActualLrp(uint64(m.PreferredAddress))
	}
	return n
}

func (m *ActualLRP) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ActualLRPKey.Size()
	n += 1 + l + sovActualLrp(uint64(l))
	l = m.ActualLRPInstanceKey.Size()
	n += 1 + l + sovActualLrp(uint64(l))
	l = m.ActualLRPNetInfo.Size()
	n += 1 + l + sovActualLrp(uint64(l))
	if m.CrashCount != 0 {
		n += 1 + sovActualLrp(uint64(m.CrashCount))
	}
	l = len(m.CrashReason)
	if l > 0 {
		n += 1 + l + sovActualLrp(uint64(l))
	}
	l = len(m.State)
	if l > 0 {
		n += 1 + l + sovActualLrp(uint64(l))
	}
	l = len(m.PlacementError)
	if l > 0 {
		n += 1 + l + sovActualLrp(uint64(l))
	}
	if m.Since != 0 {
		n += 1 + sovActualLrp(uint64(m.Since))
	}
	l = m.ModificationTag.Size()
	n += 1 + l + sovActualLrp(uint64(l))
	if m.Presence != 0 {
		n += 1 + sovActualLrp(uint64(m.Presence))
	}
	return n
}

func sovActualLrp(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozActualLrp(x uint64) (n int) {
	return sovActualLrp(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *ActualLRPGroup) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ActualLRPGroup{`,
		`Instance:` + strings.Replace(fmt.Sprintf("%v", this.Instance), "ActualLRP", "ActualLRP", 1) + `,`,
		`Evacuating:` + strings.Replace(fmt.Sprintf("%v", this.Evacuating), "ActualLRP", "ActualLRP", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PortMapping) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PortMapping{`,
		`ContainerPort:` + fmt.Sprintf("%v", this.ContainerPort) + `,`,
		`HostPort:` + fmt.Sprintf("%v", this.HostPort) + `,`,
		`ContainerTlsProxyPort:` + fmt.Sprintf("%v", this.ContainerTlsProxyPort) + `,`,
		`HostTlsProxyPort:` + fmt.Sprintf("%v", this.HostTlsProxyPort) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ActualLRPKey) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ActualLRPKey{`,
		`ProcessGuid:` + fmt.Sprintf("%v", this.ProcessGuid) + `,`,
		`Index:` + fmt.Sprintf("%v", this.Index) + `,`,
		`Domain:` + fmt.Sprintf("%v", this.Domain) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ActualLRPInstanceKey) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ActualLRPInstanceKey{`,
		`InstanceGuid:` + fmt.Sprintf("%v", this.InstanceGuid) + `,`,
		`CellId:` + fmt.Sprintf("%v", this.CellId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ActualLRPNetInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ActualLRPNetInfo{`,
		`Address:` + fmt.Sprintf("%v", this.Address) + `,`,
		`Ports:` + strings.Replace(fmt.Sprintf("%v", this.Ports), "PortMapping", "PortMapping", 1) + `,`,
		`InstanceAddress:` + fmt.Sprintf("%v", this.InstanceAddress) + `,`,
		`PreferredAddress:` + fmt.Sprintf("%v", this.PreferredAddress) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ActualLRP) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ActualLRP{`,
		`ActualLRPKey:` + strings.Replace(strings.Replace(this.ActualLRPKey.String(), "ActualLRPKey", "ActualLRPKey", 1), `&`, ``, 1) + `,`,
		`ActualLRPInstanceKey:` + strings.Replace(strings.Replace(this.ActualLRPInstanceKey.String(), "ActualLRPInstanceKey", "ActualLRPInstanceKey", 1), `&`, ``, 1) + `,`,
		`ActualLRPNetInfo:` + strings.Replace(strings.Replace(this.ActualLRPNetInfo.String(), "ActualLRPNetInfo", "ActualLRPNetInfo", 1), `&`, ``, 1) + `,`,
		`CrashCount:` + fmt.Sprintf("%v", this.CrashCount) + `,`,
		`CrashReason:` + fmt.Sprintf("%v", this.CrashReason) + `,`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`PlacementError:` + fmt.Sprintf("%v", this.PlacementError) + `,`,
		`Since:` + fmt.Sprintf("%v", this.Since) + `,`,
		`ModificationTag:` + strings.Replace(strings.Replace(this.ModificationTag.String(), "ModificationTag", "ModificationTag", 1), `&`, ``, 1) + `,`,
		`Presence:` + fmt.Sprintf("%v", this.Presence) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringActualLrp(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *ActualLRPGroup) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActualLrp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActualLRPGroup: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActualLRPGroup: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Instance", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActualLrp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthActualLrp
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Instance == nil {
				m.Instance = &ActualLRP{}
			}
			if err := m.Instance.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Evacuating", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActualLrp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthActualLrp
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Evacuating == nil {
				m.Evacuating = &ActualLRP{}
			}
			if err := m.Evacuating.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipActualLrp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActualLrp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PortMapping) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActualLrp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PortMapping: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PortMapping: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContainerPort", wireType)
			}
			m.ContainerPort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActualLrp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ContainerPort |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostPort", wireType)
			}
			m.HostPort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActualLrp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HostPort |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContainerTlsProxyPort", wireType)
			}
			m.ContainerTlsProxyPort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActualLrp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ContainerTlsProxyPort |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostTlsProxyPort", wireType)
			}
			m.HostTlsProxyPort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActualLrp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HostTlsProxyPort |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipActualLrp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActualLrp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActualLRPKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActualLrp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActualLRPKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActualLRPKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProcessGuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActualLrp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActualLrp
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProcessGuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActualLrp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActualLrp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActualLrp
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipActualLrp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActualLrp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActualLRPInstanceKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActualLrp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActualLRPInstanceKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActualLRPInstanceKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstanceGuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActualLrp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActualLrp
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InstanceGuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CellId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActualLrp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActualLrp
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CellId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipActualLrp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActualLrp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActualLRPNetInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActualLrp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActualLRPNetInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActualLRPNetInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActualLrp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActualLrp
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ports", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActualLrp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthActualLrp
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ports = append(m.Ports, &PortMapping{})
			if err := m.Ports[len(m.Ports)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstanceAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActualLrp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActualLrp
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InstanceAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreferredAddress", wireType)
			}
			m.PreferredAddress = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActualLrp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PreferredAddress |= (ActualLRPNetInfo_PreferredAddress(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipActualLrp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActualLrp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActualLRP) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActualLrp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActualLRP: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActualLRP: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActualLRPKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActualLrp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthActualLrp
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ActualLRPKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActualLRPInstanceKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActualLrp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthActualLrp
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ActualLRPInstanceKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActualLRPNetInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActualLrp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthActualLrp
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ActualLRPNetInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrashCount", wireType)
			}
			m.CrashCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActualLrp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CrashCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrashReason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActualLrp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActualLrp
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CrashReason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActualLrp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActualLrp
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.State = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlacementError", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActualLrp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActualLrp
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlacementError = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Since", wireType)
			}
			m.Since = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActualLrp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Since |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModificationTag", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActualLrp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthActualLrp
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ModificationTag.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Presence", wireType)
			}
			m.Presence = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActualLrp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Presence |= (ActualLRP_Presence(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipActualLrp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActualLrp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipActualLrp(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowActualLrp
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowActualLrp
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowActualLrp
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthActualLrp
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowActualLrp
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipActualLrp(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthActualLrp = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowActualLrp   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("actual_lrp.proto", fileDescriptor_actual_lrp_10bbc9293257e61f) }

var fileDescriptor_actual_lrp_10bbc9293257e61f = []byte{
	// 990 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x55, 0x4f, 0x6f, 0xdb, 0xc6,
	0x13, 0x15, 0xed, 0xc8, 0x92, 0x46, 0xb2, 0x4c, 0xaf, 0x9d, 0x9f, 0x09, 0xfd, 0x02, 0x52, 0x15,
	0x5a, 0xd4, 0x09, 0x60, 0xa7, 0x75, 0x82, 0x16, 0xed, 0x4d, 0x74, 0x0c, 0x5b, 0x70, 0x22, 0x1b,
	0x6b, 0xbb, 0x45, 0x81, 0x02, 0x2a, 0x4d, 0xae, 0x65, 0x22, 0x12, 0x97, 0x58, 0xae, 0xd2, 0xf8,
	0xd6, 0x63, 0x21, 0xf4, 0xd0, 0x63, 0x2f, 0xba, 0xf7, 0xa3, 0xe4, 0xe8, 0x4b, 0x81, 0x1c, 0x0a,
	0xa2, 0x96, 0x2f, 0x05, 0x4f, 0xf9, 0x08, 0xc5, 0x2e, 0xff, 0x58, 0xa6, 0x90, 0xd3, 0xee, 0xce,
	0xbc, 0xf7, 0x66, 0x38, 0x33, 0xbb, 0x04, 0xd5, 0xb2, 0xf9, 0xc8, 0x1a, 0xf4, 0x06, 0xcc, 0xdf,
	0xf6, 0x19, 0xe5, 0x14, 0x2d, 0x0d, 0xa9, 0x43, 0x06, 0x41, 0x63, 0xab, 0xef, 0xf2, 0xcb, 0xd1,
	0xf9, 0xb6, 0x4d, 0x87, 0x4f, 0xfb, 0xb4, 0x4f, 0x9f, 0x4a, 0xf7, 0xf9, 0xe8, 0x42, 0x9e, 0xe4,
	0x41, 0xee, 0x62, 0x5a, 0xe3, 0x7f, 0x43, 0xea, 0xb8, 0x17, 0xae, 0x6d, 0x71, 0x97, 0x7a, 0x3d,
	0x6e, 0xf5, 0x63, 0x7b, 0xeb, 0x0d, 0xd4, 0xdb, 0x32, 0xc4, 0x4b, 0x7c, 0xbc, 0xcf, 0xe8, 0xc8,
	0x47, 0x5b, 0x50, 0x76, 0xbd, 0x80, 0x5b, 0x9e, 0x4d, 0x34, 0xa5, 0xa9, 0x6c, 0x56, 0x77, 0x56,
	0xb7, 0xe3, 0x98, 0xdb, 0x19, 0x12, 0x67, 0x10, 0xf4, 0x25, 0x00, 0x79, 0x63, 0xd9, 0x23, 0x8b,
	0xbb, 0x5e, 0x5f, 0x5b, 0xf8, 0x18, 0x61, 0x06, 0xf4, 0xed, 0x82, 0xa6, 0xb4, 0xfe, 0x56, 0xa0,
	0x7a, 0x4c, 0x19, 0x7f, 0x65, 0xf9, 0xbe, 0xeb, 0xf5, 0xd1, 0x37, 0x50, 0xb7, 0xa9, 0xc7, 0x2d,
	0xd7, 0x23, 0xac, 0xe7, 0x53, 0xc6, 0x65, 0xec, 0x65, 0x13, 0x45, 0xa1, 0x91, 0xf3, 0xe0, 0xe5,
	0xec, 0x2c, 0x14, 0xd0, 0x13, 0xa8, 0x5c, 0xd2, 0x80, 0xc7, 0xac, 0x05, 0xc9, 0x5a, 0x8e, 0x42,
	0xe3, 0xce, 0x88, 0xcb, 0x62, 0x2b, 0xb1, 0x5f, 0x83, 0x76, 0x27, 0xc6, 0x07, 0x41, 0xcf, 0x67,
	0xf4, 0xed, 0x55, 0x4c, 0x5d, 0x14, 0x54, 0xfc, 0x30, 0xf3, 0x9f, 0x0e, 0x82, 0x63, 0xe1, 0x95,
	0xc4, 0x2d, 0x58, 0x93, 0x7a, 0x39, 0xce, 0x03, 0xc9, 0x51, 0x85, 0x6b, 0x16, 0xde, 0xfa, 0x55,
	0x81, 0x5a, 0xf6, 0xf1, 0x87, 0xe4, 0x0a, 0x3d, 0x83, 0x9a, 0xcf, 0xa8, 0x4d, 0x82, 0xa0, 0xd7,
	0x1f, 0xb9, 0x8e, 0xfc, 0xba, 0x8a, 0xa9, 0x46, 0xa1, 0x71, 0xcf, 0x8e, 0xab, 0xc9, 0x69, 0x7f,
	0xe4, 0x3a, 0xc8, 0x80, 0xa2, 0xeb, 0x39, 0xe4, 0xad, 0xfc, 0xaa, 0xa2, 0x59, 0x89, 0x42, 0x23,
	0x36, 0xe0, 0x78, 0x41, 0x2d, 0x58, 0x72, 0xe8, 0xd0, 0x72, 0x3d, 0x99, 0x7c, 0xc5, 0x84, 0x28,
	0x34, 0x12, 0x0b, 0x4e, 0xd6, 0x16, 0x87, 0xf5, 0x2c, 0x93, 0x4e, 0xd2, 0x35, 0x91, 0xd1, 0x57,
	0xb0, 0x9c, 0x36, 0x71, 0x36, 0xa5, 0xd5, 0x28, 0x34, 0xee, 0x3b, 0x70, 0x2d, 0x3d, 0xca, 0xa4,
	0x3e, 0x85, 0x92, 0x4d, 0x06, 0x83, 0x9e, 0xeb, 0xc8, 0xb4, 0x2a, 0x66, 0x35, 0x0a, 0x8d, 0xd4,
	0x84, 0x97, 0xc4, 0xa6, 0xe3, 0xb4, 0xfe, 0x58, 0x04, 0x35, 0x0b, 0xdb, 0x25, 0xbc, 0xe3, 0x5d,
	0x50, 0xf4, 0x19, 0x94, 0x2c, 0xc7, 0x61, 0x24, 0x08, 0x92, 0x60, 0x92, 0x9a, 0x98, 0x70, 0xba,
	0x41, 0xcf, 0xa1, 0x28, 0x8a, 0x1b, 0x68, 0x0b, 0xcd, 0xc5, 0xcd, 0xea, 0xce, 0x5a, 0x3a, 0x4d,
	0x33, 0xf3, 0x12, 0xd7, 0x42, 0xa2, 0x70, 0xbc, 0xa0, 0xc7, 0xa0, 0x66, 0x69, 0xa7, 0x51, 0x64,
	0x55, 0xf0, 0x4a, 0x6a, 0x6f, 0x27, 0x01, 0x86, 0xb0, 0xea, 0x33, 0x72, 0x41, 0x18, 0x23, 0x4e,
	0x86, 0x15, 0xad, 0xac, 0xef, 0x3c, 0x9e, 0x1b, 0xdd, 0x24, 0xf9, 0xed, 0xe3, 0x94, 0x91, 0xa8,
	0x98, 0x0f, 0xa3, 0xd0, 0x98, 0xd7, 0xc1, 0xaa, 0x9f, 0x03, 0xb6, 0x7e, 0x53, 0x40, 0xcd, 0xb3,
	0xd1, 0x26, 0x94, 0xce, 0xba, 0x87, 0xdd, 0xa3, 0xef, 0xbb, 0x6a, 0xa1, 0xf1, 0xff, 0xf1, 0xa4,
	0xb9, 0x91, 0x87, 0x9c, 0x79, 0xaf, 0x3d, 0xfa, 0xb3, 0x87, 0x9e, 0x40, 0xb9, 0xd3, 0x3d, 0x39,
	0x6d, 0x77, 0x77, 0xf7, 0x54, 0xa5, 0xf1, 0x68, 0x3c, 0x69, 0x6a, 0x79, 0x68, 0xda, 0x57, 0xd4,
	0x82, 0x07, 0x07, 0x47, 0x27, 0xa7, 0xea, 0x42, 0x43, 0x1b, 0x4f, 0x9a, 0xeb, 0x79, 0xdc, 0x01,
	0x0d, 0x78, 0xeb, 0xaf, 0x22, 0x54, 0xb2, 0xaf, 0x43, 0x07, 0x50, 0xbf, 0x7b, 0x63, 0x7a, 0xaf,
	0xc9, 0x55, 0x72, 0xe9, 0xd7, 0xe7, 0x0a, 0x71, 0x48, 0xae, 0xcc, 0xda, 0xbb, 0xd0, 0x28, 0x5c,
	0x87, 0x86, 0x12, 0x85, 0x46, 0x01, 0xd7, 0x62, 0xe6, 0x4b, 0xe6, 0x8b, 0x81, 0xb2, 0x60, 0x63,
	0x46, 0x29, 0xeb, 0x85, 0x90, 0x8c, 0x9f, 0x85, 0x47, 0x73, 0x92, 0x33, 0xf3, 0x98, 0x93, 0x5e,
	0xcf, 0xa4, 0x67, 0x67, 0xf6, 0x0c, 0xd6, 0x66, 0x42, 0x78, 0x84, 0xf7, 0x5c, 0xef, 0x82, 0xca,
	0x36, 0x57, 0x77, 0xb4, 0x8f, 0xb5, 0x2e, 0x27, 0xad, 0x66, 0xd2, 0xe9, 0x5c, 0x7e, 0x01, 0x55,
	0x9b, 0x59, 0xc1, 0x65, 0xcf, 0xa6, 0x23, 0x2f, 0xbe, 0xd4, 0x45, 0x73, 0x25, 0x0a, 0x8d, 0x59,
	0x33, 0x06, 0x79, 0xd8, 0x15, 0x7b, 0xf4, 0x09, 0xd4, 0x62, 0x17, 0x23, 0x56, 0x40, 0x3d, 0xad,
	0x28, 0x07, 0x2d, 0x86, 0x63, 0x69, 0x12, 0x97, 0x37, 0xe0, 0x16, 0x27, 0xda, 0x92, 0x1c, 0x75,
	0x39, 0xb0, 0xd2, 0x80, 0xe3, 0x05, 0x7d, 0x0e, 0x2b, 0xfe, 0xc0, 0xb2, 0xc9, 0x90, 0x78, 0xbc,
	0x47, 0x18, 0xa3, 0x4c, 0x2b, 0x49, 0x99, 0x7a, 0x66, 0xde, 0x13, 0x56, 0xa9, 0xe4, 0x8a, 0xe7,
	0xb8, 0xdc, 0x54, 0x36, 0x17, 0x13, 0x25, 0x61, 0xc0, 0xf1, 0x82, 0x7e, 0x04, 0x35, 0xff, 0xbc,
	0x6b, 0x15, 0x59, 0x93, 0x8d, 0xb4, 0x26, 0xaf, 0x66, 0xfc, 0xa7, 0x56, 0xdf, 0xd4, 0x44, 0x49,
	0xa2, 0xd0, 0x98, 0x23, 0xe2, 0x95, 0xe1, 0x7d, 0x28, 0x7a, 0x01, 0x65, 0x9f, 0x91, 0x80, 0x88,
	0x0c, 0x40, 0x5e, 0x92, 0xc6, 0x5c, 0xa5, 0xc5, 0xed, 0x90, 0x08, 0xb3, 0x16, 0x85, 0x46, 0x86,
	0xc7, 0xd9, 0xae, 0xf5, 0x13, 0x94, 0x53, 0x0c, 0x6a, 0x40, 0xf9, 0x08, 0xbf, 0xe8, 0x74, 0xdb,
	0xf8, 0x07, 0xb5, 0xd0, 0xa8, 0x8d, 0x27, 0xcd, 0xf2, 0x11, 0x73, 0x5c, 0xcf, 0x62, 0x57, 0x48,
	0x07, 0xd8, 0xfb, 0xae, 0xbd, 0x7b, 0xd6, 0x3e, 0xed, 0x74, 0xf7, 0x55, 0xa5, 0x51, 0x1f, 0x4f,
	0x9a, 0xb0, 0x97, 0xfd, 0x3c, 0x90, 0x06, 0xa5, 0x93, 0xb3, 0x93, 0xe3, 0xbd, 0x5d, 0x31, 0xe4,
	0xd5, 0xf1, 0xa4, 0x59, 0x3a, 0x19, 0x05, 0x3e, 0xb1, 0xb9, 0xf9, 0xfc, 0xfa, 0x46, 0x57, 0xde,
	0xdf, 0xe8, 0x85, 0x0f, 0x37, 0xba, 0xf2, 0xcb, 0x54, 0x57, 0xfe, 0x9c, 0xea, 0xca, 0xbb, 0xa9,
	0xae, 0x5c, 0x4f, 0x75, 0xe5, 0x9f, 0xa9, 0xae, 0xfc, 0x3b, 0xd5, 0x0b, 0x1f, 0xa6, 0xba, 0xf2,
	0xfb, 0xad, 0x5e, 0xb8, 0xbe, 0xd5, 0x0b, 0xef, 0x6f, 0xf5, 0xc2, 0xf9, 0x92, 0xfc, 0x0f, 0x3e,
	0xfb, 0x2f, 0x00, 0x00, 0xff, 0xff, 0xb1, 0xcf, 0x31, 0xfc, 0x6a, 0x07, 0x00, 0x00,
}
