// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: evacuation.proto

package models

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type EvacuationResponse struct {
	Error         *Error `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	KeepContainer bool   `protobuf:"varint,2,opt,name=keep_container,json=keepContainer,proto3" json:"keep_container"`
}

func (m *EvacuationResponse) Reset()      { *m = EvacuationResponse{} }
func (*EvacuationResponse) ProtoMessage() {}
func (*EvacuationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_evacuation_21f204cd10b8bf07, []int{0}
}
func (m *EvacuationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EvacuationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EvacuationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *EvacuationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EvacuationResponse.Merge(dst, src)
}
func (m *EvacuationResponse) XXX_Size() int {
	return m.Size()
}
func (m *EvacuationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_EvacuationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_EvacuationResponse proto.InternalMessageInfo

func (m *EvacuationResponse) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *EvacuationResponse) GetKeepContainer() bool {
	if m != nil {
		return m.KeepContainer
	}
	return false
}

type EvacuateClaimedActualLRPRequest struct {
	ActualLrpKey         *ActualLRPKey         `protobuf:"bytes,1,opt,name=actual_lrp_key,json=actualLrpKey,proto3" json:"actual_lrp_key,omitempty"`
	ActualLrpInstanceKey *ActualLRPInstanceKey `protobuf:"bytes,2,opt,name=actual_lrp_instance_key,json=actualLrpInstanceKey,proto3" json:"actual_lrp_instance_key,omitempty"`
}

func (m *EvacuateClaimedActualLRPRequest) Reset()      { *m = EvacuateClaimedActualLRPRequest{} }
func (*EvacuateClaimedActualLRPRequest) ProtoMessage() {}
func (*EvacuateClaimedActualLRPRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_evacuation_21f204cd10b8bf07, []int{1}
}
func (m *EvacuateClaimedActualLRPRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EvacuateClaimedActualLRPRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EvacuateClaimedActualLRPRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *EvacuateClaimedActualLRPRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EvacuateClaimedActualLRPRequest.Merge(dst, src)
}
func (m *EvacuateClaimedActualLRPRequest) XXX_Size() int {
	return m.Size()
}
func (m *EvacuateClaimedActualLRPRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EvacuateClaimedActualLRPRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EvacuateClaimedActualLRPRequest proto.InternalMessageInfo

func (m *EvacuateClaimedActualLRPRequest) GetActualLrpKey() *ActualLRPKey {
	if m != nil {
		return m.ActualLrpKey
	}
	return nil
}

func (m *EvacuateClaimedActualLRPRequest) GetActualLrpInstanceKey() *ActualLRPInstanceKey {
	if m != nil {
		return m.ActualLrpInstanceKey
	}
	return nil
}

type EvacuateRunningActualLRPRequest struct {
	ActualLrpKey         *ActualLRPKey         `protobuf:"bytes,1,opt,name=actual_lrp_key,json=actualLrpKey,proto3" json:"actual_lrp_key,omitempty"`
	ActualLrpInstanceKey *ActualLRPInstanceKey `protobuf:"bytes,2,opt,name=actual_lrp_instance_key,json=actualLrpInstanceKey,proto3" json:"actual_lrp_instance_key,omitempty"`
	ActualLrpNetInfo     *ActualLRPNetInfo     `protobuf:"bytes,3,opt,name=actual_lrp_net_info,json=actualLrpNetInfo,proto3" json:"actual_lrp_net_info,omitempty"`
}

func (m *EvacuateRunningActualLRPRequest) Reset()      { *m = EvacuateRunningActualLRPRequest{} }
func (*EvacuateRunningActualLRPRequest) ProtoMessage() {}
func (*EvacuateRunningActualLRPRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_evacuation_21f204cd10b8bf07, []int{2}
}
func (m *EvacuateRunningActualLRPRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EvacuateRunningActualLRPRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EvacuateRunningActualLRPRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *EvacuateRunningActualLRPRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EvacuateRunningActualLRPRequest.Merge(dst, src)
}
func (m *EvacuateRunningActualLRPRequest) XXX_Size() int {
	return m.Size()
}
func (m *EvacuateRunningActualLRPRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EvacuateRunningActualLRPRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EvacuateRunningActualLRPRequest proto.InternalMessageInfo

func (m *EvacuateRunningActualLRPRequest) GetActualLrpKey() *ActualLRPKey {
	if m != nil {
		return m.ActualLrpKey
	}
	return nil
}

func (m *EvacuateRunningActualLRPRequest) GetActualLrpInstanceKey() *ActualLRPInstanceKey {
	if m != nil {
		return m.ActualLrpInstanceKey
	}
	return nil
}

func (m *EvacuateRunningActualLRPRequest) GetActualLrpNetInfo() *ActualLRPNetInfo {
	if m != nil {
		return m.ActualLrpNetInfo
	}
	return nil
}

type EvacuateStoppedActualLRPRequest struct {
	ActualLrpKey         *ActualLRPKey         `protobuf:"bytes,1,opt,name=actual_lrp_key,json=actualLrpKey,proto3" json:"actual_lrp_key,omitempty"`
	ActualLrpInstanceKey *ActualLRPInstanceKey `protobuf:"bytes,2,opt,name=actual_lrp_instance_key,json=actualLrpInstanceKey,proto3" json:"actual_lrp_instance_key,omitempty"`
}

func (m *EvacuateStoppedActualLRPRequest) Reset()      { *m = EvacuateStoppedActualLRPRequest{} }
func (*EvacuateStoppedActualLRPRequest) ProtoMessage() {}
func (*EvacuateStoppedActualLRPRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_evacuation_21f204cd10b8bf07, []int{3}
}
func (m *EvacuateStoppedActualLRPRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EvacuateStoppedActualLRPRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EvacuateStoppedActualLRPRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *EvacuateStoppedActualLRPRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EvacuateStoppedActualLRPRequest.Merge(dst, src)
}
func (m *EvacuateStoppedActualLRPRequest) XXX_Size() int {
	return m.Size()
}
func (m *EvacuateStoppedActualLRPRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EvacuateStoppedActualLRPRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EvacuateStoppedActualLRPRequest proto.InternalMessageInfo

func (m *EvacuateStoppedActualLRPRequest) GetActualLrpKey() *ActualLRPKey {
	if m != nil {
		return m.ActualLrpKey
	}
	return nil
}

func (m *EvacuateStoppedActualLRPRequest) GetActualLrpInstanceKey() *ActualLRPInstanceKey {
	if m != nil {
		return m.ActualLrpInstanceKey
	}
	return nil
}

type EvacuateCrashedActualLRPRequest struct {
	ActualLrpKey         *ActualLRPKey         `protobuf:"bytes,1,opt,name=actual_lrp_key,json=actualLrpKey,proto3" json:"actual_lrp_key,omitempty"`
	ActualLrpInstanceKey *ActualLRPInstanceKey `protobuf:"bytes,2,opt,name=actual_lrp_instance_key,json=actualLrpInstanceKey,proto3" json:"actual_lrp_instance_key,omitempty"`
	ErrorMessage         string                `protobuf:"bytes,3,opt,name=error_message,json=errorMessage,proto3" json:"error_message"`
}

func (m *EvacuateCrashedActualLRPRequest) Reset()      { *m = EvacuateCrashedActualLRPRequest{} }
func (*EvacuateCrashedActualLRPRequest) ProtoMessage() {}
func (*EvacuateCrashedActualLRPRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_evacuation_21f204cd10b8bf07, []int{4}
}
func (m *EvacuateCrashedActualLRPRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EvacuateCrashedActualLRPRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EvacuateCrashedActualLRPRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *EvacuateCrashedActualLRPRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EvacuateCrashedActualLRPRequest.Merge(dst, src)
}
func (m *EvacuateCrashedActualLRPRequest) XXX_Size() int {
	return m.Size()
}
func (m *EvacuateCrashedActualLRPRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EvacuateCrashedActualLRPRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EvacuateCrashedActualLRPRequest proto.InternalMessageInfo

func (m *EvacuateCrashedActualLRPRequest) GetActualLrpKey() *ActualLRPKey {
	if m != nil {
		return m.ActualLrpKey
	}
	return nil
}

func (m *EvacuateCrashedActualLRPRequest) GetActualLrpInstanceKey() *ActualLRPInstanceKey {
	if m != nil {
		return m.ActualLrpInstanceKey
	}
	return nil
}

func (m *EvacuateCrashedActualLRPRequest) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

type RemoveEvacuatingActualLRPRequest struct {
	ActualLrpKey         *ActualLRPKey         `protobuf:"bytes,1,opt,name=actual_lrp_key,json=actualLrpKey,proto3" json:"actual_lrp_key,omitempty"`
	ActualLrpInstanceKey *ActualLRPInstanceKey `protobuf:"bytes,2,opt,name=actual_lrp_instance_key,json=actualLrpInstanceKey,proto3" json:"actual_lrp_instance_key,omitempty"`
}

func (m *RemoveEvacuatingActualLRPRequest) Reset()      { *m = RemoveEvacuatingActualLRPRequest{} }
func (*RemoveEvacuatingActualLRPRequest) ProtoMessage() {}
func (*RemoveEvacuatingActualLRPRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_evacuation_21f204cd10b8bf07, []int{5}
}
func (m *RemoveEvacuatingActualLRPRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RemoveEvacuatingActualLRPRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RemoveEvacuatingActualLRPRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RemoveEvacuatingActualLRPRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveEvacuatingActualLRPRequest.Merge(dst, src)
}
func (m *RemoveEvacuatingActualLRPRequest) XXX_Size() int {
	return m.Size()
}
func (m *RemoveEvacuatingActualLRPRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveEvacuatingActualLRPRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveEvacuatingActualLRPRequest proto.InternalMessageInfo

func (m *RemoveEvacuatingActualLRPRequest) GetActualLrpKey() *ActualLRPKey {
	if m != nil {
		return m.ActualLrpKey
	}
	return nil
}

func (m *RemoveEvacuatingActualLRPRequest) GetActualLrpInstanceKey() *ActualLRPInstanceKey {
	if m != nil {
		return m.ActualLrpInstanceKey
	}
	return nil
}

type RemoveEvacuatingActualLRPResponse struct {
	Error *Error `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *RemoveEvacuatingActualLRPResponse) Reset()      { *m = RemoveEvacuatingActualLRPResponse{} }
func (*RemoveEvacuatingActualLRPResponse) ProtoMessage() {}
func (*RemoveEvacuatingActualLRPResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_evacuation_21f204cd10b8bf07, []int{6}
}
func (m *RemoveEvacuatingActualLRPResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RemoveEvacuatingActualLRPResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RemoveEvacuatingActualLRPResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RemoveEvacuatingActualLRPResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveEvacuatingActualLRPResponse.Merge(dst, src)
}
func (m *RemoveEvacuatingActualLRPResponse) XXX_Size() int {
	return m.Size()
}
func (m *RemoveEvacuatingActualLRPResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveEvacuatingActualLRPResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveEvacuatingActualLRPResponse proto.InternalMessageInfo

func (m *RemoveEvacuatingActualLRPResponse) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func init() {
	proto.RegisterType((*EvacuationResponse)(nil), "models.EvacuationResponse")
	proto.RegisterType((*EvacuateClaimedActualLRPRequest)(nil), "models.EvacuateClaimedActualLRPRequest")
	proto.RegisterType((*EvacuateRunningActualLRPRequest)(nil), "models.EvacuateRunningActualLRPRequest")
	proto.RegisterType((*EvacuateStoppedActualLRPRequest)(nil), "models.EvacuateStoppedActualLRPRequest")
	proto.RegisterType((*EvacuateCrashedActualLRPRequest)(nil), "models.EvacuateCrashedActualLRPRequest")
	proto.RegisterType((*RemoveEvacuatingActualLRPRequest)(nil), "models.RemoveEvacuatingActualLRPRequest")
	proto.RegisterType((*RemoveEvacuatingActualLRPResponse)(nil), "models.RemoveEvacuatingActualLRPResponse")
}
func (this *EvacuationResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&models.EvacuationResponse{")
	if this.Error != nil {
		s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	}
	s = append(s, "KeepContainer: "+fmt.Sprintf("%#v", this.KeepContainer)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *EvacuateClaimedActualLRPRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&models.EvacuateClaimedActualLRPRequest{")
	if this.ActualLrpKey != nil {
		s = append(s, "ActualLrpKey: "+fmt.Sprintf("%#v", this.ActualLrpKey)+",\n")
	}
	if this.ActualLrpInstanceKey != nil {
		s = append(s, "ActualLrpInstanceKey: "+fmt.Sprintf("%#v", this.ActualLrpInstanceKey)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *EvacuateRunningActualLRPRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&models.EvacuateRunningActualLRPRequest{")
	if this.ActualLrpKey != nil {
		s = append(s, "ActualLrpKey: "+fmt.Sprintf("%#v", this.ActualLrpKey)+",\n")
	}
	if this.ActualLrpInstanceKey != nil {
		s = append(s, "ActualLrpInstanceKey: "+fmt.Sprintf("%#v", this.ActualLrpInstanceKey)+",\n")
	}
	if this.ActualLrpNetInfo != nil {
		s = append(s, "ActualLrpNetInfo: "+fmt.Sprintf("%#v", this.ActualLrpNetInfo)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *EvacuateStoppedActualLRPRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&models.EvacuateStoppedActualLRPRequest{")
	if this.ActualLrpKey != nil {
		s = append(s, "ActualLrpKey: "+fmt.Sprintf("%#v", this.ActualLrpKey)+",\n")
	}
	if this.ActualLrpInstanceKey != nil {
		s = append(s, "ActualLrpInstanceKey: "+fmt.Sprintf("%#v", this.ActualLrpInstanceKey)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *EvacuateCrashedActualLRPRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&models.EvacuateCrashedActualLRPRequest{")
	if this.ActualLrpKey != nil {
		s = append(s, "ActualLrpKey: "+fmt.Sprintf("%#v", this.ActualLrpKey)+",\n")
	}
	if this.ActualLrpInstanceKey != nil {
		s = append(s, "ActualLrpInstanceKey: "+fmt.Sprintf("%#v", this.ActualLrpInstanceKey)+",\n")
	}
	s = append(s, "ErrorMessage: "+fmt.Sprintf("%#v", this.ErrorMessage)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RemoveEvacuatingActualLRPRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&models.RemoveEvacuatingActualLRPRequest{")
	if this.ActualLrpKey != nil {
		s = append(s, "ActualLrpKey: "+fmt.Sprintf("%#v", this.ActualLrpKey)+",\n")
	}
	if this.ActualLrpInstanceKey != nil {
		s = append(s, "ActualLrpInstanceKey: "+fmt.Sprintf("%#v", this.ActualLrpInstanceKey)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RemoveEvacuatingActualLRPResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&models.RemoveEvacuatingActualLRPResponse{")
	if this.Error != nil {
		s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringEvacuation(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *EvacuationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EvacuationResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Error != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEvacuation(dAtA, i, uint64(m.Error.Size()))
		n1, err := m.Error.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.KeepContainer {
		dAtA[i] = 0x10
		i++
		if m.KeepContainer {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *EvacuateClaimedActualLRPRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EvacuateClaimedActualLRPRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ActualLrpKey != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEvacuation(dAtA, i, uint64(m.ActualLrpKey.Size()))
		n2, err := m.ActualLrpKey.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.ActualLrpInstanceKey != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintEvacuation(dAtA, i, uint64(m.ActualLrpInstanceKey.Size()))
		n3, err := m.ActualLrpInstanceKey.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func (m *EvacuateRunningActualLRPRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EvacuateRunningActualLRPRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ActualLrpKey != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEvacuation(dAtA, i, uint64(m.ActualLrpKey.Size()))
		n4, err := m.ActualLrpKey.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.ActualLrpInstanceKey != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintEvacuation(dAtA, i, uint64(m.ActualLrpInstanceKey.Size()))
		n5, err := m.ActualLrpInstanceKey.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.ActualLrpNetInfo != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintEvacuation(dAtA, i, uint64(m.ActualLrpNetInfo.Size()))
		n6, err := m.ActualLrpNetInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}

func (m *EvacuateStoppedActualLRPRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EvacuateStoppedActualLRPRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ActualLrpKey != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEvacuation(dAtA, i, uint64(m.ActualLrpKey.Size()))
		n7, err := m.ActualLrpKey.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if m.ActualLrpInstanceKey != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintEvacuation(dAtA, i, uint64(m.ActualLrpInstanceKey.Size()))
		n8, err := m.ActualLrpInstanceKey.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	return i, nil
}

func (m *EvacuateCrashedActualLRPRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EvacuateCrashedActualLRPRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ActualLrpKey != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEvacuation(dAtA, i, uint64(m.ActualLrpKey.Size()))
		n9, err := m.ActualLrpKey.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	if m.ActualLrpInstanceKey != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintEvacuation(dAtA, i, uint64(m.ActualLrpInstanceKey.Size()))
		n10, err := m.ActualLrpInstanceKey.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	if len(m.ErrorMessage) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintEvacuation(dAtA, i, uint64(len(m.ErrorMessage)))
		i += copy(dAtA[i:], m.ErrorMessage)
	}
	return i, nil
}

func (m *RemoveEvacuatingActualLRPRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemoveEvacuatingActualLRPRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ActualLrpKey != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEvacuation(dAtA, i, uint64(m.ActualLrpKey.Size()))
		n11, err := m.ActualLrpKey.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	if m.ActualLrpInstanceKey != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintEvacuation(dAtA, i, uint64(m.ActualLrpInstanceKey.Size()))
		n12, err := m.ActualLrpInstanceKey.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	return i, nil
}

func (m *RemoveEvacuatingActualLRPResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemoveEvacuatingActualLRPResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Error != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEvacuation(dAtA, i, uint64(m.Error.Size()))
		n13, err := m.Error.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	return i, nil
}

func encodeVarintEvacuation(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *EvacuationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovEvacuation(uint64(l))
	}
	if m.KeepContainer {
		n += 2
	}
	return n
}

func (m *EvacuateClaimedActualLRPRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActualLrpKey != nil {
		l = m.ActualLrpKey.Size()
		n += 1 + l + sovEvacuation(uint64(l))
	}
	if m.ActualLrpInstanceKey != nil {
		l = m.ActualLrpInstanceKey.Size()
		n += 1 + l + sovEvacuation(uint64(l))
	}
	return n
}

func (m *EvacuateRunningActualLRPRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActualLrpKey != nil {
		l = m.ActualLrpKey.Size()
		n += 1 + l + sovEvacuation(uint64(l))
	}
	if m.ActualLrpInstanceKey != nil {
		l = m.ActualLrpInstanceKey.Size()
		n += 1 + l + sovEvacuation(uint64(l))
	}
	if m.ActualLrpNetInfo != nil {
		l = m.ActualLrpNetInfo.Size()
		n += 1 + l + sovEvacuation(uint64(l))
	}
	return n
}

func (m *EvacuateStoppedActualLRPRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActualLrpKey != nil {
		l = m.ActualLrpKey.Size()
		n += 1 + l + sovEvacuation(uint64(l))
	}
	if m.ActualLrpInstanceKey != nil {
		l = m.ActualLrpInstanceKey.Size()
		n += 1 + l + sovEvacuation(uint64(l))
	}
	return n
}

func (m *EvacuateCrashedActualLRPRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActualLrpKey != nil {
		l = m.ActualLrpKey.Size()
		n += 1 + l + sovEvacuation(uint64(l))
	}
	if m.ActualLrpInstanceKey != nil {
		l = m.ActualLrpInstanceKey.Size()
		n += 1 + l + sovEvacuation(uint64(l))
	}
	l = len(m.ErrorMessage)
	if l > 0 {
		n += 1 + l + sovEvacuation(uint64(l))
	}
	return n
}

func (m *RemoveEvacuatingActualLRPRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActualLrpKey != nil {
		l = m.ActualLrpKey.Size()
		n += 1 + l + sovEvacuation(uint64(l))
	}
	if m.ActualLrpInstanceKey != nil {
		l = m.ActualLrpInstanceKey.Size()
		n += 1 + l + sovEvacuation(uint64(l))
	}
	return n
}

func (m *RemoveEvacuatingActualLRPResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovEvacuation(uint64(l))
	}
	return n
}

func sovEvacuation(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozEvacuation(x uint64) (n int) {
	return sovEvacuation(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *EvacuationResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EvacuationResponse{`,
		`Error:` + strings.Replace(fmt.Sprintf("%v", this.Error), "Error", "Error", 1) + `,`,
		`KeepContainer:` + fmt.Sprintf("%v", this.KeepContainer) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EvacuateClaimedActualLRPRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EvacuateClaimedActualLRPRequest{`,
		`ActualLrpKey:` + strings.Replace(fmt.Sprintf("%v", this.ActualLrpKey), "ActualLRPKey", "ActualLRPKey", 1) + `,`,
		`ActualLrpInstanceKey:` + strings.Replace(fmt.Sprintf("%v", this.ActualLrpInstanceKey), "ActualLRPInstanceKey", "ActualLRPInstanceKey", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EvacuateRunningActualLRPRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EvacuateRunningActualLRPRequest{`,
		`ActualLrpKey:` + strings.Replace(fmt.Sprintf("%v", this.ActualLrpKey), "ActualLRPKey", "ActualLRPKey", 1) + `,`,
		`ActualLrpInstanceKey:` + strings.Replace(fmt.Sprintf("%v", this.ActualLrpInstanceKey), "ActualLRPInstanceKey", "ActualLRPInstanceKey", 1) + `,`,
		`ActualLrpNetInfo:` + strings.Replace(fmt.Sprintf("%v", this.ActualLrpNetInfo), "ActualLRPNetInfo", "ActualLRPNetInfo", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EvacuateStoppedActualLRPRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EvacuateStoppedActualLRPRequest{`,
		`ActualLrpKey:` + strings.Replace(fmt.Sprintf("%v", this.ActualLrpKey), "ActualLRPKey", "ActualLRPKey", 1) + `,`,
		`ActualLrpInstanceKey:` + strings.Replace(fmt.Sprintf("%v", this.ActualLrpInstanceKey), "ActualLRPInstanceKey", "ActualLRPInstanceKey", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EvacuateCrashedActualLRPRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EvacuateCrashedActualLRPRequest{`,
		`ActualLrpKey:` + strings.Replace(fmt.Sprintf("%v", this.ActualLrpKey), "ActualLRPKey", "ActualLRPKey", 1) + `,`,
		`ActualLrpInstanceKey:` + strings.Replace(fmt.Sprintf("%v", this.ActualLrpInstanceKey), "ActualLRPInstanceKey", "ActualLRPInstanceKey", 1) + `,`,
		`ErrorMessage:` + fmt.Sprintf("%v", this.ErrorMessage) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RemoveEvacuatingActualLRPRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RemoveEvacuatingActualLRPRequest{`,
		`ActualLrpKey:` + strings.Replace(fmt.Sprintf("%v", this.ActualLrpKey), "ActualLRPKey", "ActualLRPKey", 1) + `,`,
		`ActualLrpInstanceKey:` + strings.Replace(fmt.Sprintf("%v", this.ActualLrpInstanceKey), "ActualLRPInstanceKey", "ActualLRPInstanceKey", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RemoveEvacuatingActualLRPResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RemoveEvacuatingActualLRPResponse{`,
		`Error:` + strings.Replace(fmt.Sprintf("%v", this.Error), "Error", "Error", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringEvacuation(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *EvacuationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvacuation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EvacuationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EvacuationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvacuation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvacuation
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeepContainer", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvacuation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.KeepContainer = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipEvacuation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvacuation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EvacuateClaimedActualLRPRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvacuation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EvacuateClaimedActualLRPRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EvacuateClaimedActualLRPRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActualLrpKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvacuation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvacuation
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ActualLrpKey == nil {
				m.ActualLrpKey = &ActualLRPKey{}
			}
			if err := m.ActualLrpKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActualLrpInstanceKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvacuation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvacuation
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ActualLrpInstanceKey == nil {
				m.ActualLrpInstanceKey = &ActualLRPInstanceKey{}
			}
			if err := m.ActualLrpInstanceKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvacuation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvacuation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EvacuateRunningActualLRPRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvacuation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EvacuateRunningActualLRPRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EvacuateRunningActualLRPRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActualLrpKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvacuation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvacuation
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ActualLrpKey == nil {
				m.ActualLrpKey = &ActualLRPKey{}
			}
			if err := m.ActualLrpKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActualLrpInstanceKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvacuation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvacuation
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ActualLrpInstanceKey == nil {
				m.ActualLrpInstanceKey = &ActualLRPInstanceKey{}
			}
			if err := m.ActualLrpInstanceKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActualLrpNetInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvacuation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvacuation
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ActualLrpNetInfo == nil {
				m.ActualLrpNetInfo = &ActualLRPNetInfo{}
			}
			if err := m.ActualLrpNetInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvacuation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvacuation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EvacuateStoppedActualLRPRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvacuation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EvacuateStoppedActualLRPRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EvacuateStoppedActualLRPRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActualLrpKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvacuation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvacuation
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ActualLrpKey == nil {
				m.ActualLrpKey = &ActualLRPKey{}
			}
			if err := m.ActualLrpKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActualLrpInstanceKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvacuation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvacuation
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ActualLrpInstanceKey == nil {
				m.ActualLrpInstanceKey = &ActualLRPInstanceKey{}
			}
			if err := m.ActualLrpInstanceKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvacuation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvacuation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EvacuateCrashedActualLRPRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvacuation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EvacuateCrashedActualLRPRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EvacuateCrashedActualLRPRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActualLrpKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvacuation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvacuation
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ActualLrpKey == nil {
				m.ActualLrpKey = &ActualLRPKey{}
			}
			if err := m.ActualLrpKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActualLrpInstanceKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvacuation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvacuation
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ActualLrpInstanceKey == nil {
				m.ActualLrpInstanceKey = &ActualLRPInstanceKey{}
			}
			if err := m.ActualLrpInstanceKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvacuation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvacuation
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrorMessage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvacuation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvacuation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemoveEvacuatingActualLRPRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvacuation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemoveEvacuatingActualLRPRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemoveEvacuatingActualLRPRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActualLrpKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvacuation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvacuation
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ActualLrpKey == nil {
				m.ActualLrpKey = &ActualLRPKey{}
			}
			if err := m.ActualLrpKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActualLrpInstanceKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvacuation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvacuation
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ActualLrpInstanceKey == nil {
				m.ActualLrpInstanceKey = &ActualLRPInstanceKey{}
			}
			if err := m.ActualLrpInstanceKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvacuation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvacuation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemoveEvacuatingActualLRPResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvacuation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemoveEvacuatingActualLRPResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemoveEvacuatingActualLRPResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvacuation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvacuation
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvacuation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvacuation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEvacuation(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvacuation
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvacuation
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvacuation
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthEvacuation
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowEvacuation
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipEvacuation(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthEvacuation = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvacuation   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("evacuation.proto", fileDescriptor_evacuation_21f204cd10b8bf07) }

var fileDescriptor_evacuation_21f204cd10b8bf07 = []byte{
	// 460 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x94, 0x4f, 0x6f, 0xd3, 0x30,
	0x18, 0xc6, 0xe3, 0xb2, 0x4d, 0xc3, 0x5b, 0xa7, 0x62, 0x26, 0x51, 0x4d, 0xc8, 0x2d, 0xe1, 0xb2,
	0x0b, 0x99, 0x04, 0x08, 0x09, 0x6e, 0x74, 0x9a, 0x60, 0x6c, 0x20, 0xe4, 0x7d, 0x80, 0xc8, 0xcd,
	0xde, 0x66, 0xd1, 0x12, 0x3b, 0xd8, 0xce, 0xa4, 0xde, 0xe0, 0x1b, 0xf0, 0x31, 0x38, 0xc3, 0x97,
	0xe0, 0xd8, 0xe3, 0x4e, 0x13, 0x4d, 0x2f, 0xa8, 0xa7, 0x7d, 0x04, 0x54, 0x27, 0xcd, 0x32, 0x26,
	0x21, 0x71, 0x5b, 0x6f, 0x7e, 0xde, 0x3f, 0xbf, 0xf7, 0x91, 0x5e, 0xdb, 0xb8, 0x05, 0x67, 0x3c,
	0xc8, 0xb8, 0x89, 0xa4, 0xf0, 0x52, 0x25, 0x8d, 0x24, 0x2b, 0x89, 0x3c, 0x86, 0x58, 0x6f, 0x3d,
	0x09, 0x23, 0x73, 0x92, 0xf5, 0xbd, 0x40, 0x26, 0x3b, 0xa1, 0x0c, 0xe5, 0x8e, 0x4d, 0xf7, 0xb3,
	0x81, 0x55, 0x56, 0xd8, 0x53, 0xd1, 0xb6, 0xd5, 0xe2, 0x81, 0xc9, 0x78, 0xec, 0xc7, 0x2a, 0x2d,
	0x23, 0x6b, 0xa0, 0x94, 0x54, 0x85, 0x70, 0x0d, 0x26, 0x7b, 0xd5, 0x24, 0x06, 0x3a, 0x95, 0x42,
	0x03, 0x79, 0x8c, 0x97, 0x6d, 0x51, 0x1b, 0x75, 0xd1, 0xf6, 0xda, 0xd3, 0xa6, 0x57, 0xcc, 0xf6,
	0xf6, 0x66, 0x41, 0x56, 0xe4, 0xc8, 0x4b, 0xbc, 0x71, 0x0a, 0x90, 0xfa, 0x81, 0x14, 0x86, 0x47,
	0x02, 0x54, 0xbb, 0xd1, 0x45, 0xdb, 0xab, 0x3d, 0x32, 0xbd, 0xe8, 0xfc, 0x95, 0x61, 0xcd, 0x99,
	0xde, 0x9d, 0x4b, 0xf7, 0x3b, 0xc2, 0x9d, 0x72, 0x2c, 0xec, 0xc6, 0x3c, 0x4a, 0xe0, 0xf8, 0xb5,
	0xb5, 0x79, 0xc8, 0x3e, 0x32, 0xf8, 0x94, 0x81, 0x36, 0xe4, 0x15, 0xde, 0xb8, 0xb2, 0xee, 0x9f,
	0xc2, 0xb0, 0x34, 0xb3, 0x39, 0x37, 0x53, 0x75, 0x1c, 0xc0, 0x90, 0xad, 0x17, 0xb5, 0x87, 0x2a,
	0x3d, 0x80, 0x21, 0x39, 0xc2, 0x0f, 0x6a, 0xbd, 0x91, 0xd0, 0x86, 0x8b, 0x00, 0x2c, 0xa4, 0x61,
	0x21, 0x0f, 0x6f, 0x40, 0xf6, 0xcb, 0xa2, 0x19, 0x6c, 0xb3, 0x82, 0xd5, 0xa2, 0xee, 0x97, 0xc6,
	0x95, 0x69, 0x96, 0x09, 0x11, 0x89, 0xf0, 0xd6, 0x9b, 0x26, 0x6f, 0xf0, 0xfd, 0x1a, 0x54, 0x80,
	0xf1, 0x23, 0x31, 0x90, 0xed, 0x3b, 0x16, 0xd8, 0xbe, 0x01, 0xfc, 0x00, 0x66, 0x5f, 0x0c, 0x24,
	0x6b, 0x55, 0xb0, 0x32, 0xf2, 0x6e, 0x69, 0x75, 0xa9, 0xb5, 0x7c, 0x6d, 0x71, 0x47, 0x46, 0xa6,
	0xe9, 0x22, 0x2c, 0x6e, 0x5a, 0xbf, 0x6d, 0x8a, 0xeb, 0x93, 0x05, 0x30, 0x4d, 0x5e, 0xe0, 0xa6,
	0x7d, 0x66, 0x7e, 0x02, 0x5a, 0xf3, 0x10, 0xec, 0xca, 0xee, 0xf6, 0xee, 0x4d, 0x2f, 0x3a, 0xd7,
	0x13, 0x6c, 0xdd, 0xca, 0xf7, 0x85, 0x72, 0x7f, 0x20, 0xdc, 0x65, 0x90, 0xc8, 0x33, 0x98, 0xbf,
	0xeb, 0x05, 0xb8, 0xa6, 0xee, 0x5b, 0xfc, 0xe8, 0x1f, 0xa6, 0xff, 0xe3, 0x57, 0xea, 0x3d, 0x1f,
	0x8d, 0xa9, 0x73, 0x3e, 0xa6, 0xce, 0xe5, 0x98, 0xa2, 0xcf, 0x39, 0x45, 0xdf, 0x72, 0xea, 0xfc,
	0xcc, 0x29, 0x1a, 0xe5, 0x14, 0xfd, 0xca, 0x29, 0xfa, 0x9d, 0x53, 0xe7, 0x32, 0xa7, 0xe8, 0xeb,
	0x84, 0x3a, 0xa3, 0x09, 0x75, 0xce, 0x27, 0xd4, 0xe9, 0xaf, 0xd8, 0xdf, 0xf0, 0xd9, 0x9f, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x8a, 0x83, 0x02, 0x65, 0x77, 0x05, 0x00, 0x00,
}
