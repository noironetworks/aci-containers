// Code generated by counterfeiter. DO NOT EDIT.
package guidproviderfakes

import (
	"sync"

	"code.cloudfoundry.org/bbs/guidprovider"
)

type FakeGUIDProvider struct {
	NextGUIDStub        func() (string, error)
	nextGUIDMutex       sync.RWMutex
	nextGUIDArgsForCall []struct {
	}
	nextGUIDReturns struct {
		result1 string
		result2 error
	}
	nextGUIDReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeGUIDProvider) NextGUID() (string, error) {
	fake.nextGUIDMutex.Lock()
	ret, specificReturn := fake.nextGUIDReturnsOnCall[len(fake.nextGUIDArgsForCall)]
	fake.nextGUIDArgsForCall = append(fake.nextGUIDArgsForCall, struct {
	}{})
	fake.recordInvocation("NextGUID", []interface{}{})
	nextGUIDStubCopy := fake.NextGUIDStub
	fake.nextGUIDMutex.Unlock()
	if nextGUIDStubCopy != nil {
		return nextGUIDStubCopy()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.nextGUIDReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeGUIDProvider) NextGUIDCallCount() int {
	fake.nextGUIDMutex.RLock()
	defer fake.nextGUIDMutex.RUnlock()
	return len(fake.nextGUIDArgsForCall)
}

func (fake *FakeGUIDProvider) NextGUIDCalls(stub func() (string, error)) {
	fake.nextGUIDMutex.Lock()
	defer fake.nextGUIDMutex.Unlock()
	fake.NextGUIDStub = stub
}

func (fake *FakeGUIDProvider) NextGUIDReturns(result1 string, result2 error) {
	fake.nextGUIDMutex.Lock()
	defer fake.nextGUIDMutex.Unlock()
	fake.NextGUIDStub = nil
	fake.nextGUIDReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeGUIDProvider) NextGUIDReturnsOnCall(i int, result1 string, result2 error) {
	fake.nextGUIDMutex.Lock()
	defer fake.nextGUIDMutex.Unlock()
	fake.NextGUIDStub = nil
	if fake.nextGUIDReturnsOnCall == nil {
		fake.nextGUIDReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.nextGUIDReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeGUIDProvider) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.nextGUIDMutex.RLock()
	defer fake.nextGUIDMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeGUIDProvider) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ guidprovider.GUIDProvider = new(FakeGUIDProvider)
