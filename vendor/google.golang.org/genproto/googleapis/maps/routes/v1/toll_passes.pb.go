// Code generated by protoc-gen-go. DO NOT EDIT.
// source: google/maps/routes/v1/toll_passes.proto

package routes

import (
	fmt "fmt"
	math "math"

	proto "github.com/golang/protobuf/proto"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// List of toll passes around the world that we support.
type TollPass int32

const (
	// Not used. If this value is used, then the request fails.
	TollPass_TOLL_PASS_UNSPECIFIED TollPass = 0
	// State pass of the Washington state, United States.
	TollPass_US_WA_GOOD_TO_GO TollPass = 1
	// E-tag pass in Australia.
	TollPass_AU_E_TAG TollPass = 2
)

var TollPass_name = map[int32]string{
	0: "TOLL_PASS_UNSPECIFIED",
	1: "US_WA_GOOD_TO_GO",
	2: "AU_E_TAG",
}

var TollPass_value = map[string]int32{
	"TOLL_PASS_UNSPECIFIED": 0,
	"US_WA_GOOD_TO_GO":      1,
	"AU_E_TAG":              2,
}

func (x TollPass) String() string {
	return proto.EnumName(TollPass_name, int32(x))
}

func (TollPass) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0f2d871abe531a5b, []int{0}
}

func init() {
	proto.RegisterEnum("google.maps.routes.v1.TollPass", TollPass_name, TollPass_value)
}

func init() {
	proto.RegisterFile("google/maps/routes/v1/toll_passes.proto", fileDescriptor_0f2d871abe531a5b)
}

var fileDescriptor_0f2d871abe531a5b = []byte{
	// 250 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0x4f, 0xcf, 0xcf, 0x4f,
	0xcf, 0x49, 0xd5, 0xcf, 0x4d, 0x2c, 0x28, 0xd6, 0x2f, 0xca, 0x2f, 0x2d, 0x49, 0x2d, 0xd6, 0x2f,
	0x33, 0xd4, 0x2f, 0xc9, 0xcf, 0xc9, 0x89, 0x2f, 0x48, 0x2c, 0x2e, 0x4e, 0x2d, 0xd6, 0x2b, 0x28,
	0xca, 0x2f, 0xc9, 0x17, 0x12, 0x85, 0x28, 0xd4, 0x03, 0x29, 0xd4, 0x83, 0x28, 0xd4, 0x2b, 0x33,
	0xd4, 0xf2, 0xe4, 0xe2, 0x08, 0xc9, 0xcf, 0xc9, 0x09, 0x48, 0x2c, 0x2e, 0x16, 0x92, 0xe4, 0x12,
	0x0d, 0xf1, 0xf7, 0xf1, 0x89, 0x0f, 0x70, 0x0c, 0x0e, 0x8e, 0x0f, 0xf5, 0x0b, 0x0e, 0x70, 0x75,
	0xf6, 0x74, 0xf3, 0x74, 0x75, 0x11, 0x60, 0x10, 0x12, 0xe1, 0x12, 0x08, 0x0d, 0x8e, 0x0f, 0x77,
	0x8c, 0x77, 0xf7, 0xf7, 0x77, 0x89, 0x0f, 0xf1, 0x8f, 0x77, 0xf7, 0x17, 0x60, 0x14, 0xe2, 0xe1,
	0xe2, 0x70, 0x0c, 0x8d, 0x77, 0x8d, 0x0f, 0x71, 0x74, 0x17, 0x60, 0x72, 0x5a, 0xca, 0xc8, 0x25,
	0x99, 0x9c, 0x9f, 0xab, 0x87, 0xd5, 0x22, 0x27, 0x7e, 0x98, 0x35, 0xa9, 0xc5, 0x01, 0x20, 0x07,
	0x05, 0x30, 0x46, 0x59, 0x43, 0x55, 0xa6, 0xe7, 0xe7, 0x24, 0xe6, 0xa5, 0xeb, 0xe5, 0x17, 0xa5,
	0xeb, 0xa7, 0xa7, 0xe6, 0x81, 0x9d, 0xab, 0x0f, 0x91, 0x4a, 0x2c, 0xc8, 0x2c, 0x46, 0xf3, 0x9a,
	0x35, 0x84, 0xf5, 0x83, 0x91, 0x71, 0x11, 0x13, 0x8b, 0xbb, 0x6f, 0x50, 0xf0, 0x2a, 0x26, 0x51,
	0x77, 0x88, 0x39, 0xbe, 0x20, 0x1b, 0x83, 0x20, 0x36, 0x86, 0x19, 0x9e, 0x82, 0x89, 0xc7, 0x80,
	0xc4, 0x63, 0x20, 0xe2, 0x31, 0x61, 0x86, 0x49, 0x6c, 0x60, 0x1b, 0x8c, 0x01, 0x01, 0x00, 0x00,
	0xff, 0xff, 0xea, 0x02, 0xe3, 0x79, 0x3b, 0x01, 0x00, 0x00,
}
