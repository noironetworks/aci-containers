// Code generated by protoc-gen-go. DO NOT EDIT.
// source: google/monitoring/dashboard/v1/xychart.proto

package dashboard

import (
	fmt "fmt"
	math "math"

	proto "github.com/golang/protobuf/proto"
	duration "github.com/golang/protobuf/ptypes/duration"
	_ "google.golang.org/genproto/googleapis/api/annotations"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// The types of plotting strategies for data sets.
type XyChart_DataSet_PlotType int32

const (
	// Plot type is unspecified. The view will default to `LINE`.
	XyChart_DataSet_PLOT_TYPE_UNSPECIFIED XyChart_DataSet_PlotType = 0
	// The data is plotted as a set of lines (one line per series).
	XyChart_DataSet_LINE XyChart_DataSet_PlotType = 1
	// The data is plotted as a set of filled areas (one area per series),
	// with the areas stacked vertically (the base of each area is the top of
	// its predecessor, and the base of the first area is the X axis). Since
	// the areas do not overlap, each is filled with a different opaque color.
	XyChart_DataSet_STACKED_AREA XyChart_DataSet_PlotType = 2
	// The data is plotted as a set of rectangular boxes (one box per series),
	// with the boxes stacked vertically (the base of each box is the top of
	// its predecessor, and the base of the first box is the X axis). Since
	// the boxes do not overlap, each is filled with a different opaque color.
	XyChart_DataSet_STACKED_BAR XyChart_DataSet_PlotType = 3
	// The data is plotted as a heatmap. The series being plotted must have a
	// `DISTRIBUTION` value type. The value of each bucket in the distribution
	// is displayed as a color. This type is not currently available in the
	// Stackdriver Monitoring application.
	XyChart_DataSet_HEATMAP XyChart_DataSet_PlotType = 4
)

var XyChart_DataSet_PlotType_name = map[int32]string{
	0: "PLOT_TYPE_UNSPECIFIED",
	1: "LINE",
	2: "STACKED_AREA",
	3: "STACKED_BAR",
	4: "HEATMAP",
}

var XyChart_DataSet_PlotType_value = map[string]int32{
	"PLOT_TYPE_UNSPECIFIED": 0,
	"LINE":                  1,
	"STACKED_AREA":          2,
	"STACKED_BAR":           3,
	"HEATMAP":               4,
}

func (x XyChart_DataSet_PlotType) String() string {
	return proto.EnumName(XyChart_DataSet_PlotType_name, int32(x))
}

func (XyChart_DataSet_PlotType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_cda973f0965b9c09, []int{0, 0, 0}
}

// Types of scales used in axes.
type XyChart_Axis_Scale int32

const (
	// Scale is unspecified. The view will default to `LINEAR`.
	XyChart_Axis_SCALE_UNSPECIFIED XyChart_Axis_Scale = 0
	// Linear scale.
	XyChart_Axis_LINEAR XyChart_Axis_Scale = 1
	// Logarithmic scale (base 10).
	XyChart_Axis_LOG10 XyChart_Axis_Scale = 2
)

var XyChart_Axis_Scale_name = map[int32]string{
	0: "SCALE_UNSPECIFIED",
	1: "LINEAR",
	2: "LOG10",
}

var XyChart_Axis_Scale_value = map[string]int32{
	"SCALE_UNSPECIFIED": 0,
	"LINEAR":            1,
	"LOG10":             2,
}

func (x XyChart_Axis_Scale) String() string {
	return proto.EnumName(XyChart_Axis_Scale_name, int32(x))
}

func (XyChart_Axis_Scale) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_cda973f0965b9c09, []int{0, 1, 0}
}

// Chart mode options.
type ChartOptions_Mode int32

const (
	// Mode is unspecified. The view will default to `COLOR`.
	ChartOptions_MODE_UNSPECIFIED ChartOptions_Mode = 0
	// The chart distinguishes data series using different color. Line
	// colors may get reused when there are many lines in the chart.
	ChartOptions_COLOR ChartOptions_Mode = 1
	// The chart uses the Stackdriver x-ray mode, in which each
	// data set is plotted using the same semi-transparent color.
	ChartOptions_X_RAY ChartOptions_Mode = 2
	// The chart displays statistics such as average, median, 95th percentile,
	// and more.
	ChartOptions_STATS ChartOptions_Mode = 3
)

var ChartOptions_Mode_name = map[int32]string{
	0: "MODE_UNSPECIFIED",
	1: "COLOR",
	2: "X_RAY",
	3: "STATS",
}

var ChartOptions_Mode_value = map[string]int32{
	"MODE_UNSPECIFIED": 0,
	"COLOR":            1,
	"X_RAY":            2,
	"STATS":            3,
}

func (x ChartOptions_Mode) String() string {
	return proto.EnumName(ChartOptions_Mode_name, int32(x))
}

func (ChartOptions_Mode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_cda973f0965b9c09, []int{1, 0}
}

// A chart that displays data on a 2D (X and Y axes) plane.
type XyChart struct {
	// The data displayed in this chart.
	DataSets []*XyChart_DataSet `protobuf:"bytes,1,rep,name=data_sets,json=dataSets,proto3" json:"data_sets,omitempty"`
	// The duration used to display a comparison chart. A comparison chart
	// simultaneously shows values from two similar-length time periods
	// (e.g., week-over-week metrics).
	// The duration must be positive, and it can only be applied to charts with
	// data sets of LINE plot type.
	TimeshiftDuration *duration.Duration `protobuf:"bytes,4,opt,name=timeshift_duration,json=timeshiftDuration,proto3" json:"timeshift_duration,omitempty"`
	// Threshold lines drawn horizontally across the chart.
	Thresholds []*Threshold `protobuf:"bytes,5,rep,name=thresholds,proto3" json:"thresholds,omitempty"`
	// The properties applied to the X axis.
	XAxis *XyChart_Axis `protobuf:"bytes,6,opt,name=x_axis,json=xAxis,proto3" json:"x_axis,omitempty"`
	// The properties applied to the Y axis.
	YAxis *XyChart_Axis `protobuf:"bytes,7,opt,name=y_axis,json=yAxis,proto3" json:"y_axis,omitempty"`
	// Display options for the chart.
	ChartOptions         *ChartOptions `protobuf:"bytes,8,opt,name=chart_options,json=chartOptions,proto3" json:"chart_options,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *XyChart) Reset()         { *m = XyChart{} }
func (m *XyChart) String() string { return proto.CompactTextString(m) }
func (*XyChart) ProtoMessage()    {}
func (*XyChart) Descriptor() ([]byte, []int) {
	return fileDescriptor_cda973f0965b9c09, []int{0}
}

func (m *XyChart) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_XyChart.Unmarshal(m, b)
}
func (m *XyChart) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_XyChart.Marshal(b, m, deterministic)
}
func (m *XyChart) XXX_Merge(src proto.Message) {
	xxx_messageInfo_XyChart.Merge(m, src)
}
func (m *XyChart) XXX_Size() int {
	return xxx_messageInfo_XyChart.Size(m)
}
func (m *XyChart) XXX_DiscardUnknown() {
	xxx_messageInfo_XyChart.DiscardUnknown(m)
}

var xxx_messageInfo_XyChart proto.InternalMessageInfo

func (m *XyChart) GetDataSets() []*XyChart_DataSet {
	if m != nil {
		return m.DataSets
	}
	return nil
}

func (m *XyChart) GetTimeshiftDuration() *duration.Duration {
	if m != nil {
		return m.TimeshiftDuration
	}
	return nil
}

func (m *XyChart) GetThresholds() []*Threshold {
	if m != nil {
		return m.Thresholds
	}
	return nil
}

func (m *XyChart) GetXAxis() *XyChart_Axis {
	if m != nil {
		return m.XAxis
	}
	return nil
}

func (m *XyChart) GetYAxis() *XyChart_Axis {
	if m != nil {
		return m.YAxis
	}
	return nil
}

func (m *XyChart) GetChartOptions() *ChartOptions {
	if m != nil {
		return m.ChartOptions
	}
	return nil
}

// Groups a time series query definition with charting options.
type XyChart_DataSet struct {
	// Fields for querying time series data from the
	// Stackdriver metrics API.
	TimeSeriesQuery *TimeSeriesQuery `protobuf:"bytes,1,opt,name=time_series_query,json=timeSeriesQuery,proto3" json:"time_series_query,omitempty"`
	// How this data should be plotted on the chart.
	PlotType XyChart_DataSet_PlotType `protobuf:"varint,2,opt,name=plot_type,json=plotType,proto3,enum=google.monitoring.dashboard.v1.XyChart_DataSet_PlotType" json:"plot_type,omitempty"`
	// A template string for naming `TimeSeries` in the resulting data set.
	// This should be a string with interpolations of the form ${label_name},
	// which will resolve to the label's value.
	LegendTemplate string `protobuf:"bytes,3,opt,name=legend_template,json=legendTemplate,proto3" json:"legend_template,omitempty"`
	// Optional. The lower bound on data point frequency for this data set, implemented by
	// specifying the minimum alignment period to use in a time series query
	// For example, if the data is published once every 10 minutes, the
	// `min_alignment_period` should be at least 10 minutes. It would not
	// make sense to fetch and align data at one minute intervals.
	MinAlignmentPeriod   *duration.Duration `protobuf:"bytes,4,opt,name=min_alignment_period,json=minAlignmentPeriod,proto3" json:"min_alignment_period,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *XyChart_DataSet) Reset()         { *m = XyChart_DataSet{} }
func (m *XyChart_DataSet) String() string { return proto.CompactTextString(m) }
func (*XyChart_DataSet) ProtoMessage()    {}
func (*XyChart_DataSet) Descriptor() ([]byte, []int) {
	return fileDescriptor_cda973f0965b9c09, []int{0, 0}
}

func (m *XyChart_DataSet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_XyChart_DataSet.Unmarshal(m, b)
}
func (m *XyChart_DataSet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_XyChart_DataSet.Marshal(b, m, deterministic)
}
func (m *XyChart_DataSet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_XyChart_DataSet.Merge(m, src)
}
func (m *XyChart_DataSet) XXX_Size() int {
	return xxx_messageInfo_XyChart_DataSet.Size(m)
}
func (m *XyChart_DataSet) XXX_DiscardUnknown() {
	xxx_messageInfo_XyChart_DataSet.DiscardUnknown(m)
}

var xxx_messageInfo_XyChart_DataSet proto.InternalMessageInfo

func (m *XyChart_DataSet) GetTimeSeriesQuery() *TimeSeriesQuery {
	if m != nil {
		return m.TimeSeriesQuery
	}
	return nil
}

func (m *XyChart_DataSet) GetPlotType() XyChart_DataSet_PlotType {
	if m != nil {
		return m.PlotType
	}
	return XyChart_DataSet_PLOT_TYPE_UNSPECIFIED
}

func (m *XyChart_DataSet) GetLegendTemplate() string {
	if m != nil {
		return m.LegendTemplate
	}
	return ""
}

func (m *XyChart_DataSet) GetMinAlignmentPeriod() *duration.Duration {
	if m != nil {
		return m.MinAlignmentPeriod
	}
	return nil
}

// A chart axis.
type XyChart_Axis struct {
	// The label of the axis.
	Label string `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
	// The axis scale. By default, a linear scale is used.
	Scale                XyChart_Axis_Scale `protobuf:"varint,2,opt,name=scale,proto3,enum=google.monitoring.dashboard.v1.XyChart_Axis_Scale" json:"scale,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *XyChart_Axis) Reset()         { *m = XyChart_Axis{} }
func (m *XyChart_Axis) String() string { return proto.CompactTextString(m) }
func (*XyChart_Axis) ProtoMessage()    {}
func (*XyChart_Axis) Descriptor() ([]byte, []int) {
	return fileDescriptor_cda973f0965b9c09, []int{0, 1}
}

func (m *XyChart_Axis) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_XyChart_Axis.Unmarshal(m, b)
}
func (m *XyChart_Axis) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_XyChart_Axis.Marshal(b, m, deterministic)
}
func (m *XyChart_Axis) XXX_Merge(src proto.Message) {
	xxx_messageInfo_XyChart_Axis.Merge(m, src)
}
func (m *XyChart_Axis) XXX_Size() int {
	return xxx_messageInfo_XyChart_Axis.Size(m)
}
func (m *XyChart_Axis) XXX_DiscardUnknown() {
	xxx_messageInfo_XyChart_Axis.DiscardUnknown(m)
}

var xxx_messageInfo_XyChart_Axis proto.InternalMessageInfo

func (m *XyChart_Axis) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

func (m *XyChart_Axis) GetScale() XyChart_Axis_Scale {
	if m != nil {
		return m.Scale
	}
	return XyChart_Axis_SCALE_UNSPECIFIED
}

// Options to control visual rendering of a chart.
type ChartOptions struct {
	// The chart mode.
	Mode                 ChartOptions_Mode `protobuf:"varint,1,opt,name=mode,proto3,enum=google.monitoring.dashboard.v1.ChartOptions_Mode" json:"mode,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ChartOptions) Reset()         { *m = ChartOptions{} }
func (m *ChartOptions) String() string { return proto.CompactTextString(m) }
func (*ChartOptions) ProtoMessage()    {}
func (*ChartOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_cda973f0965b9c09, []int{1}
}

func (m *ChartOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChartOptions.Unmarshal(m, b)
}
func (m *ChartOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChartOptions.Marshal(b, m, deterministic)
}
func (m *ChartOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChartOptions.Merge(m, src)
}
func (m *ChartOptions) XXX_Size() int {
	return xxx_messageInfo_ChartOptions.Size(m)
}
func (m *ChartOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_ChartOptions.DiscardUnknown(m)
}

var xxx_messageInfo_ChartOptions proto.InternalMessageInfo

func (m *ChartOptions) GetMode() ChartOptions_Mode {
	if m != nil {
		return m.Mode
	}
	return ChartOptions_MODE_UNSPECIFIED
}

func init() {
	proto.RegisterEnum("google.monitoring.dashboard.v1.XyChart_DataSet_PlotType", XyChart_DataSet_PlotType_name, XyChart_DataSet_PlotType_value)
	proto.RegisterEnum("google.monitoring.dashboard.v1.XyChart_Axis_Scale", XyChart_Axis_Scale_name, XyChart_Axis_Scale_value)
	proto.RegisterEnum("google.monitoring.dashboard.v1.ChartOptions_Mode", ChartOptions_Mode_name, ChartOptions_Mode_value)
	proto.RegisterType((*XyChart)(nil), "google.monitoring.dashboard.v1.XyChart")
	proto.RegisterType((*XyChart_DataSet)(nil), "google.monitoring.dashboard.v1.XyChart.DataSet")
	proto.RegisterType((*XyChart_Axis)(nil), "google.monitoring.dashboard.v1.XyChart.Axis")
	proto.RegisterType((*ChartOptions)(nil), "google.monitoring.dashboard.v1.ChartOptions")
}

func init() {
	proto.RegisterFile("google/monitoring/dashboard/v1/xychart.proto", fileDescriptor_cda973f0965b9c09)
}

var fileDescriptor_cda973f0965b9c09 = []byte{
	// 705 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x54, 0x4d, 0x8f, 0xe3, 0x44,
	0x10, 0xc5, 0x93, 0xef, 0x4a, 0x98, 0xf1, 0xb6, 0x66, 0x25, 0x6f, 0x0e, 0x10, 0xe5, 0x42, 0x90,
	0x56, 0x36, 0x09, 0x42, 0x42, 0x42, 0x1c, 0x9c, 0xc4, 0xec, 0x44, 0x64, 0x36, 0xde, 0xb6, 0x57,
	0xda, 0x85, 0x43, 0xab, 0x13, 0xf7, 0x38, 0x2d, 0xd9, 0x6e, 0x63, 0xf7, 0x8c, 0x92, 0x03, 0x47,
	0xfe, 0x01, 0x17, 0x0e, 0xfc, 0x37, 0x7e, 0x0a, 0x72, 0xdb, 0x1e, 0x86, 0x95, 0x20, 0x33, 0x7b,
	0x72, 0x57, 0x75, 0xbd, 0x57, 0xaf, 0xba, 0x9e, 0x0c, 0x2f, 0x43, 0x21, 0xc2, 0x88, 0x59, 0xb1,
	0x48, 0xb8, 0x14, 0x19, 0x4f, 0x42, 0x2b, 0xa0, 0xf9, 0x7e, 0x2b, 0x68, 0x16, 0x58, 0x77, 0x53,
	0xeb, 0x70, 0xdc, 0xed, 0x69, 0x26, 0xcd, 0x34, 0x13, 0x52, 0xa0, 0xcf, 0xca, 0x6a, 0xf3, 0x9f,
	0x6a, 0xf3, 0xbe, 0xda, 0xbc, 0x9b, 0x0e, 0x3f, 0xaf, 0xd8, 0x68, 0xca, 0xad, 0x1b, 0xce, 0xa2,
	0x80, 0x6c, 0xd9, 0x9e, 0xde, 0x71, 0x91, 0x95, 0x04, 0xc3, 0x53, 0xed, 0x62, 0x26, 0x33, 0xbe,
	0xcb, 0xab, 0xea, 0xaa, 0x9d, 0xa5, 0xa2, 0xed, 0xed, 0x8d, 0x15, 0xdc, 0x66, 0x54, 0x72, 0x91,
	0x94, 0xf7, 0xe3, 0xdf, 0xba, 0xd0, 0x79, 0x77, 0x5c, 0x14, 0x02, 0xd1, 0x1a, 0x7a, 0x01, 0x95,
	0x94, 0xe4, 0x4c, 0xe6, 0x86, 0x36, 0x6a, 0x4c, 0xfa, 0x33, 0xcb, 0xfc, 0x7f, 0xb9, 0x66, 0x85,
	0x35, 0x97, 0x54, 0x52, 0x8f, 0x49, 0xdc, 0x0d, 0xca, 0x43, 0x8e, 0xae, 0x00, 0x49, 0x1e, 0xb3,
	0x7c, 0xcf, 0x6f, 0x24, 0xa9, 0xbb, 0x1a, 0xcd, 0x91, 0x36, 0xe9, 0xcf, 0x5e, 0xd4, 0xb4, 0xb5,
	0x2c, 0x73, 0x59, 0x15, 0xe0, 0x67, 0xf7, 0xa0, 0x3a, 0x85, 0x56, 0x00, 0x72, 0x9f, 0xb1, 0x7c,
	0x2f, 0xa2, 0x20, 0x37, 0x5a, 0x4a, 0xd8, 0x97, 0xa7, 0x84, 0xf9, 0x35, 0x02, 0x3f, 0x00, 0xa3,
	0x05, 0xb4, 0x0f, 0x84, 0x1e, 0x78, 0x6e, 0xb4, 0x95, 0x90, 0x97, 0x8f, 0x9d, 0xcf, 0x3e, 0xf0,
	0x1c, 0xb7, 0x0e, 0xc5, 0xa7, 0x20, 0x39, 0x96, 0x24, 0x9d, 0x8f, 0x21, 0x39, 0x2a, 0x92, 0x37,
	0xf0, 0xa9, 0xb2, 0x05, 0x11, 0x69, 0x31, 0x64, 0x6e, 0x74, 0x1f, 0xc7, 0xa5, 0x98, 0x36, 0x25,
	0x06, 0x0f, 0x76, 0x0f, 0xa2, 0xe1, 0x1f, 0x0d, 0xe8, 0x54, 0x7b, 0x40, 0x3f, 0x83, 0x7a, 0x48,
	0x92, 0xb3, 0x8c, 0xb3, 0x9c, 0xfc, 0x72, 0xcb, 0xb2, 0xa3, 0xa1, 0xa9, 0x16, 0x27, 0x77, 0xea,
	0xf3, 0x98, 0x79, 0x0a, 0xf7, 0xa6, 0x80, 0xe1, 0x0b, 0xf9, 0xef, 0x04, 0x7a, 0x0b, 0xbd, 0x34,
	0x12, 0x92, 0xc8, 0x63, 0xca, 0x8c, 0xb3, 0x91, 0x36, 0x39, 0x9f, 0x7d, 0xfb, 0x44, 0xa3, 0x98,
	0x6e, 0x24, 0xa4, 0x7f, 0x4c, 0x19, 0xee, 0xa6, 0xd5, 0x09, 0x7d, 0x01, 0x17, 0x11, 0x0b, 0x59,
	0x12, 0x10, 0xc9, 0xe2, 0x34, 0xa2, 0x92, 0x19, 0x8d, 0x91, 0x36, 0xe9, 0xe1, 0xf3, 0x32, 0xed,
	0x57, 0x59, 0xe4, 0xc2, 0x65, 0xcc, 0x13, 0x42, 0x23, 0x1e, 0x26, 0x31, 0x4b, 0x24, 0x49, 0x59,
	0xc6, 0x45, 0x70, 0xd2, 0x5c, 0xf3, 0xc6, 0x5f, 0xb6, 0x86, 0x51, 0xcc, 0x13, 0xbb, 0x86, 0xba,
	0x0a, 0x39, 0x26, 0xd0, 0xad, 0x05, 0xa1, 0x17, 0xf0, 0xdc, 0x5d, 0x6f, 0x7c, 0xe2, 0xbf, 0x77,
	0x1d, 0xf2, 0xf6, 0xb5, 0xe7, 0x3a, 0x8b, 0xd5, 0x0f, 0x2b, 0x67, 0xa9, 0x7f, 0x82, 0xba, 0xd0,
	0x5c, 0xaf, 0x5e, 0x3b, 0xba, 0x86, 0x74, 0x18, 0x78, 0xbe, 0xbd, 0xf8, 0xd1, 0x59, 0x12, 0x1b,
	0x3b, 0xb6, 0x7e, 0x86, 0x2e, 0xa0, 0x5f, 0x67, 0xe6, 0x36, 0xd6, 0x1b, 0xa8, 0x0f, 0x9d, 0x2b,
	0xc7, 0xf6, 0xaf, 0x6d, 0x57, 0x6f, 0x0e, 0xff, 0xd4, 0xa0, 0xa9, 0xf6, 0x7e, 0x09, 0xad, 0x88,
	0x6e, 0x59, 0xa4, 0x96, 0xd1, 0xc3, 0x65, 0x80, 0xae, 0xa0, 0x95, 0xef, 0x68, 0x54, 0xbf, 0xe6,
	0xec, 0x29, 0x8e, 0x32, 0xbd, 0x02, 0x89, 0x4b, 0x82, 0xf1, 0x37, 0xd0, 0x52, 0x31, 0x7a, 0x0e,
	0xcf, 0xbc, 0x85, 0xbd, 0xfe, 0x70, 0x04, 0x80, 0x76, 0x31, 0x82, 0x8d, 0x75, 0x0d, 0xf5, 0xa0,
	0xb5, 0xde, 0xbc, 0x9a, 0x7e, 0xa5, 0x9f, 0x8d, 0x7f, 0xd7, 0x60, 0xf0, 0xd0, 0x5a, 0xc8, 0x81,
	0x66, 0x2c, 0x02, 0xa6, 0x64, 0x9e, 0xcf, 0xa6, 0x4f, 0xb1, 0xa5, 0x79, 0x2d, 0x02, 0x86, 0x15,
	0x7c, 0xfc, 0x3d, 0x34, 0x8b, 0x08, 0x5d, 0x82, 0x7e, 0xbd, 0x59, 0x7e, 0x28, 0xa6, 0x07, 0xad,
	0xc5, 0x66, 0xbd, 0xa9, 0xb4, 0xbc, 0x23, 0xd8, 0x7e, 0xaf, 0x9f, 0x15, 0x47, 0xcf, 0xb7, 0x7d,
	0x4f, 0x6f, 0xcc, 0x7f, 0x85, 0xf1, 0x4e, 0xc4, 0x27, 0x9a, 0xcf, 0x07, 0xd5, 0x73, 0xb8, 0xc5,
	0xc2, 0x5d, 0xed, 0xa7, 0x57, 0x55, 0x7d, 0x28, 0x22, 0x9a, 0x84, 0xa6, 0xc8, 0x42, 0x2b, 0x64,
	0x89, 0xb2, 0x83, 0x55, 0x5e, 0xd1, 0x94, 0xe7, 0xff, 0xf5, 0x07, 0xfd, 0xee, 0x3e, 0xd8, 0xb6,
	0x15, 0xe6, 0xeb, 0xbf, 0x03, 0x00, 0x00, 0xff, 0xff, 0x76, 0xca, 0x15, 0x0b, 0xe3, 0x05, 0x00,
	0x00,
}
